### YamlMime:ManagedReference
items:
- uid: Orleans.Serialization.DeepCopier
  commentId: T:Orleans.Serialization.DeepCopier
  id: DeepCopier
  parent: Orleans.Serialization
  children: []
  langs:
  - csharp
  - vb
  name: DeepCopier
  nameWithType: DeepCopier
  fullName: Orleans.Serialization.DeepCopier
  type: Delegate
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/SerializerDelegates.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: DeepCopier
    path: src/Orleans.Core.Abstractions/Serialization/SerializerDelegates.cs
    startLine: 24
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: "\nDeep copier function.\n"
  example: []
  syntax:
    content: public delegate object DeepCopier(object original, ICopyContext context);
    parameters:
    - id: original
      type: System.Object
      description: Original object to be deep copied.
    - id: context
      type: Orleans.Serialization.ICopyContext
      description: The serialization context.
    return:
      type: System.Object
      description: Deep copy of the original object.
    content.vb: Public Delegate Function DeepCopier(original As Object, context As ICopyContext) As Object
  extensionMethods:
  - Orleans.Serialization.DeepCopier.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: Orleans.Serialization
  commentId: N:Orleans.Serialization
  isExternal: false
  name: Orleans.Serialization
  nameWithType: Orleans.Serialization
  fullName: Orleans.Serialization
- uid: Orleans.Serialization.DeepCopier.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<DeepCopier>()
  nameWithType: ImmutableExt.AsImmutable<DeepCopier>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Serialization.DeepCopier>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of DeepCopier)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Serialization.DeepCopier)()
  name.vb: AsImmutable(Of DeepCopier)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<DeepCopier>
    nameWithType: ImmutableExt.AsImmutable<DeepCopier>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Serialization.DeepCopier>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of DeepCopier)
    nameWithType: ImmutableExt.AsImmutable(Of DeepCopier)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Serialization.DeepCopier)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Orleans.Serialization.ICopyContext
  commentId: T:Orleans.Serialization.ICopyContext
  parent: Orleans.Serialization
  isExternal: false
  name: ICopyContext
  nameWithType: ICopyContext
  fullName: Orleans.Serialization.ICopyContext
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
