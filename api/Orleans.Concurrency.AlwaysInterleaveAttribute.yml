### YamlMime:ManagedReference
items:
- uid: Orleans.Concurrency.AlwaysInterleaveAttribute
  commentId: T:Orleans.Concurrency.AlwaysInterleaveAttribute
  id: AlwaysInterleaveAttribute
  parent: Orleans.Concurrency
  children: []
  langs:
  - csharp
  - vb
  name: AlwaysInterleaveAttribute
  nameWithType: AlwaysInterleaveAttribute
  fullName: Orleans.Concurrency.AlwaysInterleaveAttribute
  type: Class
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Concurrency/GrainAttributeConcurrency.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: AlwaysInterleaveAttribute
    path: src/Orleans.Core.Abstractions/Concurrency/GrainAttributeConcurrency.cs
    startLine: 67
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Concurrency
  summary: "\nThe AlwaysInterleaveAttribute attribute is used to mark methods that can interleave with any other method type, including write (non ReadOnly) requests.\n"
  remarks: "\nNote that this attribute is applied to method declaration in the grain interface,\nand not to the method in the implementation class itself.\n"
  example: []
  syntax:
    content: 'public sealed class AlwaysInterleaveAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class AlwaysInterleaveAttribute

          Inherits Attribute
  inheritance:
  - System.Object
  extensionMethods:
  - Orleans.Concurrency.AlwaysInterleaveAttribute.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
references:
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Orleans.Concurrency.AlwaysInterleaveAttribute.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<AlwaysInterleaveAttribute>()
  nameWithType: ImmutableExt.AsImmutable<AlwaysInterleaveAttribute>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Concurrency.AlwaysInterleaveAttribute>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of AlwaysInterleaveAttribute)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Concurrency.AlwaysInterleaveAttribute)()
  name.vb: AsImmutable(Of AlwaysInterleaveAttribute)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<AlwaysInterleaveAttribute>
    nameWithType: ImmutableExt.AsImmutable<AlwaysInterleaveAttribute>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Concurrency.AlwaysInterleaveAttribute>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of AlwaysInterleaveAttribute)
    nameWithType: ImmutableExt.AsImmutable(Of AlwaysInterleaveAttribute)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Concurrency.AlwaysInterleaveAttribute)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
