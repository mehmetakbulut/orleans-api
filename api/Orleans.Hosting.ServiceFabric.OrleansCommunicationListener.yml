### YamlMime:ManagedReference
items:
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  commentId: T:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  id: OrleansCommunicationListener
  parent: Orleans.Hosting.ServiceFabric
  children:
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor(Action{ISiloHostBuilder})
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync(CancellationToken)
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
  langs:
  - csharp
  - vb
  name: OrleansCommunicationListener
  nameWithType: OrleansCommunicationListener
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  type: Class
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: OrleansCommunicationListener
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 16
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  summary: "\nService Fabric communication listener which hosts an Orleans silo.\n"
  example: []
  syntax:
    content: 'public class OrleansCommunicationListener : ICommunicationListener'
    content.vb: >-
      Public Class OrleansCommunicationListener

          Inherits ICommunicationListener
  inheritance:
  - System.Object
  extensionMethods:
  - Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor(Action{ISiloHostBuilder})
  commentId: M:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor(Action{ISiloHostBuilder})
  id: '#ctor(Action{ISiloHostBuilder})'
  parent: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  langs:
  - csharp
  - vb
  name: OrleansCommunicationListener(Action<ISiloHostBuilder>)
  nameWithType: OrleansCommunicationListener.OrleansCommunicationListener(Action<ISiloHostBuilder>)
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OrleansCommunicationListener(Action<ISiloHostBuilder>)
  type: Constructor
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: .ctor
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 23
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  summary: "\nInitializes a new instance of the <xref href=\"Orleans.Hosting.ServiceFabric.OrleansCommunicationListener\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public OrleansCommunicationListener(Action<ISiloHostBuilder> configure)
    parameters:
    - id: configure
      type: Action{ISiloHostBuilder}
    content.vb: Public Sub New(configure As Action(Of ISiloHostBuilder))
  overload: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor*
  nameWithType.vb: OrleansCommunicationListener.OrleansCommunicationListener(Action(Of ISiloHostBuilder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OrleansCommunicationListener(Action(Of ISiloHostBuilder))
  name.vb: OrleansCommunicationListener(Action(Of ISiloHostBuilder))
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
  commentId: P:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
  id: Host
  parent: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: OrleansCommunicationListener.Host
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
  type: Property
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Host
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 32
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  summary: "\nGets or sets the underlying <see cref=\"!:ISiloHost\"></see>.\n"
  remarks: Only valid after <xref href="Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)" data-throw-if-not-resolved="false"></xref> has been invoked. Exposed for testability.
  example: []
  syntax:
    content: public ISiloHost Host { get; }
    parameters: []
    return:
      type: ISiloHost
    content.vb: Public ReadOnly Property Host As ISiloHost
  overload: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
  commentId: M:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
  id: OpenAsync(CancellationToken)
  parent: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: OrleansCommunicationListener.OpenAsync(CancellationToken)
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: OpenAsync
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 35
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  example: []
  syntax:
    content: public Task<string> OpenAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{System.String}
    content.vb: Public Function OpenAsync(cancellationToken As CancellationToken) As Task(Of String)
  overload: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync(CancellationToken)
  commentId: M:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync(CancellationToken)
  id: CloseAsync(CancellationToken)
  parent: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: OrleansCommunicationListener.CloseAsync(CancellationToken)
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: CloseAsync
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 69
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  example: []
  syntax:
    content: public Task CloseAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task
    content.vb: Public Function CloseAsync(cancellationToken As CancellationToken) As Task
  overload: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort
  commentId: M:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort
  id: Abort
  parent: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: OrleansCommunicationListener.Abort()
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort()
  type: Method
  source:
    remote:
      path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Abort
    path: src/Orleans.Hosting.ServiceFabric/OrleansCommunicationListener.cs
    startLine: 81
  assemblies:
  - Orleans.Hosting.ServiceFabric
  namespace: Orleans.Hosting.ServiceFabric
  example: []
  syntax:
    content: public void Abort()
    content.vb: Public Sub Abort
  overload: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Orleans.Hosting.ServiceFabric
  commentId: N:Orleans.Hosting.ServiceFabric
  isExternal: false
  name: Orleans.Hosting.ServiceFabric
  nameWithType: Orleans.Hosting.ServiceFabric
  fullName: Orleans.Hosting.ServiceFabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<OrleansCommunicationListener>()
  nameWithType: ImmutableExt.AsImmutable<OrleansCommunicationListener>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Hosting.ServiceFabric.OrleansCommunicationListener>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of OrleansCommunicationListener)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Hosting.ServiceFabric.OrleansCommunicationListener)()
  name.vb: AsImmutable(Of OrleansCommunicationListener)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<OrleansCommunicationListener>
    nameWithType: ImmutableExt.AsImmutable<OrleansCommunicationListener>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Hosting.ServiceFabric.OrleansCommunicationListener>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of OrleansCommunicationListener)
    nameWithType: ImmutableExt.AsImmutable(Of OrleansCommunicationListener)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Hosting.ServiceFabric.OrleansCommunicationListener)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  commentId: T:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
  isExternal: false
  name: OrleansCommunicationListener
  nameWithType: OrleansCommunicationListener
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor*
  commentId: Overload:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.#ctor
  isExternal: false
  name: OrleansCommunicationListener
  nameWithType: OrleansCommunicationListener.OrleansCommunicationListener
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OrleansCommunicationListener
- uid: Action{ISiloHostBuilder}
  commentId: '!:Action{ISiloHostBuilder}'
  definition: Action`1
  name: Action<ISiloHostBuilder>
  nameWithType: Action<ISiloHostBuilder>
  fullName: Action<ISiloHostBuilder>
  nameWithType.vb: Action(Of ISiloHostBuilder)
  fullName.vb: Action(Of ISiloHostBuilder)
  name.vb: Action(Of ISiloHostBuilder)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ISiloHostBuilder
    name: ISiloHostBuilder
    nameWithType: ISiloHostBuilder
    fullName: ISiloHostBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ISiloHostBuilder
    name: ISiloHostBuilder
    nameWithType: ISiloHostBuilder
    fullName: ISiloHostBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
  commentId: M:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync(CancellationToken)
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host*
  commentId: Overload:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
  isExternal: false
  name: Host
  nameWithType: OrleansCommunicationListener.Host
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Host
- uid: ISiloHost
  commentId: '!:ISiloHost'
  isExternal: true
  name: ISiloHost
  nameWithType: ISiloHost
  fullName: ISiloHost
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync*
  commentId: Overload:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: OrleansCommunicationListener.OpenAsync
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.OpenAsync
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync*
  commentId: Overload:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: OrleansCommunicationListener.CloseAsync
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.CloseAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort*
  commentId: Overload:Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort
  isExternal: false
  name: Abort
  nameWithType: OrleansCommunicationListener.Abort
  fullName: Orleans.Hosting.ServiceFabric.OrleansCommunicationListener.Abort
