### YamlMime:ManagedReference
items:
- uid: Orleans.Streams.IAsyncObservable`1
  commentId: T:Orleans.Streams.IAsyncObservable`1
  id: IAsyncObservable`1
  parent: Orleans.Streams
  children:
  - Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  - Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  langs:
  - csharp
  - vb
  name: IAsyncObservable<T>
  nameWithType: IAsyncObservable<T>
  fullName: Orleans.Streams.IAsyncObservable<T>
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IAsyncObservable
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
    startLine: 17
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nThis interface generalizes the standard .NET IObserveable interface to allow asynchronous consumption of items.\nAsynchronous here means that the consumer can process items asynchronously and signal item completion to the \nproducer by completing the returned Task.\n<p>\nNote that this interface is invoked (used) by item consumers and implemented by item producers.\nThis means that the producer endpoint of a stream implements this interface.\n</p>\n"
  example: []
  syntax:
    content: public interface IAsyncObservable<T>
    typeParameters:
    - id: T
      description: The type of object produced by the observable.
    content.vb: Public Interface IAsyncObservable(Of T)
  extensionMethods:
  - Orleans.Streams.IAsyncObservable`1.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task})
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  nameWithType.vb: IAsyncObservable(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T)
  name.vb: IAsyncObservable(Of T)
- uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  commentId: M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  id: SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  parent: Orleans.Streams.IAsyncObservable`1
  langs:
  - csharp
  - vb
  name: SubscribeAsync(IAsyncObserver<T>)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: SubscribeAsync
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
    startLine: 27
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nSubscribe a consumer to this observable.\n"
  example: []
  syntax:
    content: Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncObserver<T> observer)
    parameters:
    - id: observer
      type: Orleans.Streams.IAsyncObserver{{T}}
      description: The asynchronous observer to subscribe.
    return:
      type: Task{Orleans.Streams.StreamSubscriptionHandle{{T}}}
      description: >
        A promise for a StreamSubscriptionHandle that represents the subscription.

        The consumer may unsubscribe by using this handle.

        The subscription remains active for as long as it is not explicitely unsubscribed.
    content.vb: Function SubscribeAsync(observer As IAsyncObserver(Of T)) As Task(Of StreamSubscriptionHandle(Of T))
  overload: Orleans.Streams.IAsyncObservable`1.SubscribeAsync*
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T))
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T))
  name.vb: SubscribeAsync(IAsyncObserver(Of T))
- uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  id: SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.IAsyncObservable`1
  langs:
  - csharp
  - vb
  name: SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: SubscribeAsync
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncObservable.cs
    startLine: 43
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nSubscribe a consumer to this observable.\n"
  example: []
  syntax:
    content: Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncObserver<T> observer, StreamSequenceToken token, StreamFilterPredicate filterFunc = null, object filterData = null)
    parameters:
    - id: observer
      type: Orleans.Streams.IAsyncObserver{{T}}
      description: The asynchronous observer to subscribe.
    - id: token
      type: Orleans.Streams.StreamSequenceToken
      description: The stream sequence to be used as an offset to start the subscription from.
    - id: filterFunc
      type: Orleans.Streams.StreamFilterPredicate
      description: Filter to be applied for this subscription
    - id: filterData
      type: System.Object
      description: >-
        Data object that will be passed in to the filterFunc.

        This will usually contain any paramaters required by the filterFunc to make it&apos;s filtering decision.
    return:
      type: Task{Orleans.Streams.StreamSubscriptionHandle{{T}}}
      description: >
        A promise for a StreamSubscriptionHandle that represents the subscription.

        The consumer may unsubscribe by using this handle.

        The subscription remains active for as long as it is not explicitely unsubscribed.
    content.vb: Function SubscribeAsync(observer As IAsyncObserver(Of T), token As StreamSequenceToken, filterFunc As StreamFilterPredicate = Nothing, filterData As Object = Nothing) As Task(Of StreamSubscriptionHandle(Of T))
  overload: Orleans.Streams.IAsyncObservable`1.SubscribeAsync*
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
references:
- uid: Orleans.Streams
  commentId: N:Orleans.Streams
  isExternal: false
  name: Orleans.Streams
  nameWithType: Orleans.Streams
  fullName: Orleans.Streams
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IAsyncObservable<T>>()
  nameWithType: ImmutableExt.AsImmutable<IAsyncObservable<T>>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Streams.IAsyncObservable<T>>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IAsyncObservable(Of T))()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Streams.IAsyncObservable(Of T))()
  name.vb: AsImmutable(Of IAsyncObservable(Of T))()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IAsyncObservable<T>>
    nameWithType: ImmutableExt.AsImmutable<IAsyncObservable<T>>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Streams.IAsyncObservable<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IAsyncObservable(Of T))
    nameWithType: ImmutableExt.AsImmutable(Of IAsyncObservable(Of T))
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Streams.IAsyncObservable(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions
  commentId: T:Orleans.Streams.AsyncObservableExtensions
  parent: Orleans.Streams
  isExternal: false
  name: AsyncObservableExtensions
  nameWithType: AsyncObservableExtensions
  fullName: Orleans.Streams.AsyncObservableExtensions
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync*
  commentId: Overload:Orleans.Streams.IAsyncObservable`1.SubscribeAsync
  isExternal: false
  name: SubscribeAsync
  nameWithType: IAsyncObservable<T>.SubscribeAsync
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync
- uid: Orleans.Streams.IAsyncObserver{{T}}
  commentId: T:Orleans.Streams.IAsyncObserver{`0}
  parent: Orleans.Streams
  definition: Orleans.Streams.IAsyncObserver`1
  name: IAsyncObserver<T>
  nameWithType: IAsyncObserver<T>
  fullName: Orleans.Streams.IAsyncObserver<T>
  nameWithType.vb: IAsyncObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T)
  name.vb: IAsyncObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Orleans.Streams.StreamSubscriptionHandle{{T}}}
  commentId: '!:Task{Orleans.Streams.StreamSubscriptionHandle{`0}}'
  definition: Task`1
  name: Task<StreamSubscriptionHandle<T>>
  nameWithType: Task<StreamSubscriptionHandle<T>>
  fullName: Task<Orleans.Streams.StreamSubscriptionHandle<T>>
  nameWithType.vb: Task(Of StreamSubscriptionHandle(Of T))
  fullName.vb: Task(Of Orleans.Streams.StreamSubscriptionHandle(Of T))
  name.vb: Task(Of StreamSubscriptionHandle(Of T))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Streams.StreamSubscriptionHandle`1
    name: StreamSubscriptionHandle
    nameWithType: StreamSubscriptionHandle
    fullName: Orleans.Streams.StreamSubscriptionHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Streams.StreamSubscriptionHandle`1
    name: StreamSubscriptionHandle
    nameWithType: StreamSubscriptionHandle
    fullName: Orleans.Streams.StreamSubscriptionHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver`1
  commentId: T:Orleans.Streams.IAsyncObserver`1
  isExternal: false
  name: IAsyncObserver<T>
  nameWithType: IAsyncObserver<T>
  fullName: Orleans.Streams.IAsyncObserver<T>
  nameWithType.vb: IAsyncObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T)
  name.vb: IAsyncObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.StreamSequenceToken
  commentId: T:Orleans.Streams.StreamSequenceToken
  parent: Orleans.Streams
  isExternal: false
  name: StreamSequenceToken
  nameWithType: StreamSequenceToken
  fullName: Orleans.Streams.StreamSequenceToken
- uid: Orleans.Streams.StreamFilterPredicate
  commentId: T:Orleans.Streams.StreamFilterPredicate
  parent: Orleans.Streams
  isExternal: false
  name: StreamFilterPredicate
  nameWithType: StreamFilterPredicate
  fullName: Orleans.Streams.StreamFilterPredicate
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
