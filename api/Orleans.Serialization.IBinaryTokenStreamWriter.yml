### YamlMime:ManagedReference
items:
- uid: Orleans.Serialization.IBinaryTokenStreamWriter
  commentId: T:Orleans.Serialization.IBinaryTokenStreamWriter
  id: IBinaryTokenStreamWriter
  parent: Orleans.Serialization
  children:
  - Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
  - Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers
  - Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray
  - Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes
  - Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(DateTime)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(Guid)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPAddress)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPEndPoint)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(List{ArraySegment{System.Byte}})
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Decimal)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.String)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64)
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64[])
  - Orleans.Serialization.IBinaryTokenStreamWriter.Write(TimeSpan)
  - Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull
  - Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader(Type,Type)
  langs:
  - csharp
  - vb
  name: IBinaryTokenStreamWriter
  nameWithType: IBinaryTokenStreamWriter
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IBinaryTokenStreamWriter
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 7
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  syntax:
    content: public interface IBinaryTokenStreamWriter
    content.vb: Public Interface IBinaryTokenStreamWriter
  extensionMethods:
  - Orleans.Serialization.IBinaryTokenStreamWriter.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes
  id: ToBytes
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: ToBytes()
  nameWithType: IBinaryTokenStreamWriter.ToBytes()
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ToBytes
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 11
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Return the output stream as a set of <code>ArraySegment</code>. '
  example: []
  syntax:
    content: List<ArraySegment<byte>> ToBytes()
    return:
      type: List{ArraySegment{System.Byte}}
      description: Data from this stream, converted to output type.
    content.vb: Function ToBytes As List(Of ArraySegment(Of Byte))
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray
  id: ToByteArray
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: ToByteArray()
  nameWithType: IBinaryTokenStreamWriter.ToByteArray()
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ToByteArray
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 15
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Return the output stream as a <code>byte[]</code>. '
  example: []
  syntax:
    content: byte[] ToByteArray()
    return:
      type: System.Byte[]
      description: Data from this stream, converted to output type.
    content.vb: Function ToByteArray As Byte()
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers
  id: ReleaseBuffers
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: ReleaseBuffers()
  nameWithType: IBinaryTokenStreamWriter.ReleaseBuffers()
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ReleaseBuffers
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 18
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Release any serialization buffers being used by this stream. '
  example: []
  syntax:
    content: void ReleaseBuffers()
    content.vb: Sub ReleaseBuffers
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
  commentId: P:Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
  id: CurrentOffset
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: CurrentOffset
  nameWithType: IBinaryTokenStreamWriter.CurrentOffset
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: CurrentOffset
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 21
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Current write position in the stream. '
  example: []
  syntax:
    content: int CurrentOffset { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property CurrentOffset As Integer
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32)
  id: Write(System.Int32)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int32)
  nameWithType: IBinaryTokenStreamWriter.Write(Int32)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 24
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write an <code>Int32</code> value to the stream. '
  example: []
  syntax:
    content: void Write(int i)
    parameters:
    - id: i
      type: System.Int32
    content.vb: Sub Write(i As Integer)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16)
  id: Write(System.Int16)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int16)
  nameWithType: IBinaryTokenStreamWriter.Write(Int16)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 27
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write an <code>Int16</code> value to the stream. '
  example: []
  syntax:
    content: void Write(short s)
    parameters:
    - id: s
      type: System.Int16
    content.vb: Sub Write(s As Short)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64)
  id: Write(System.Int64)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int64)
  nameWithType: IBinaryTokenStreamWriter.Write(Int64)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 30
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write an <code>Int64</code> value to the stream. '
  example: []
  syntax:
    content: void Write(long l)
    parameters:
    - id: l
      type: System.Int64
    content.vb: Sub Write(l As Long)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte)
  id: Write(System.SByte)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(SByte)
  nameWithType: IBinaryTokenStreamWriter.Write(SByte)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 33
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>sbyte</code> value to the stream. '
  example: []
  syntax:
    content: void Write(sbyte b)
    parameters:
    - id: b
      type: System.SByte
    content.vb: Sub Write(b As SByte)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt32)
  nameWithType: IBinaryTokenStreamWriter.Write(UInt32)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 36
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt32</code> value to the stream. '
  example: []
  syntax:
    content: void Write(uint u)
    parameters:
    - id: u
      type: System.UInt32
    content.vb: Sub Write(u As UInteger)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16)
  id: Write(System.UInt16)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt16)
  nameWithType: IBinaryTokenStreamWriter.Write(UInt16)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 39
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt16</code> value to the stream. '
  example: []
  syntax:
    content: void Write(ushort u)
    parameters:
    - id: u
      type: System.UInt16
    content.vb: Sub Write(u As UShort)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt64)
  nameWithType: IBinaryTokenStreamWriter.Write(UInt64)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 42
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt64</code> value to the stream. '
  example: []
  syntax:
    content: void Write(ulong u)
    parameters:
    - id: u
      type: System.UInt64
    content.vb: Sub Write(u As ULong)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte)
  id: Write(System.Byte)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Byte)
  nameWithType: IBinaryTokenStreamWriter.Write(Byte)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 45
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>byte</code> value to the stream. '
  example: []
  syntax:
    content: void Write(byte b)
    parameters:
    - id: b
      type: System.Byte
    content.vb: Sub Write(b As Byte)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single)
  id: Write(System.Single)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Single)
  nameWithType: IBinaryTokenStreamWriter.Write(Single)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 48
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>float</code> value to the stream. '
  example: []
  syntax:
    content: void Write(float f)
    parameters:
    - id: f
      type: System.Single
    content.vb: Sub Write(f As Single)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double)
  id: Write(System.Double)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Double)
  nameWithType: IBinaryTokenStreamWriter.Write(Double)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 51
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>double</code> value to the stream. '
  example: []
  syntax:
    content: void Write(double d)
    parameters:
    - id: d
      type: System.Double
    content.vb: Sub Write(d As Double)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Decimal)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Decimal)
  nameWithType: IBinaryTokenStreamWriter.Write(Decimal)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Decimal)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 54
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>decimal</code> value to the stream. '
  example: []
  syntax:
    content: void Write(decimal d)
    parameters:
    - id: d
      type: System.Decimal
    content.vb: Sub Write(d As Decimal)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.String)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.String)
  id: Write(System.String)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  nameWithType: IBinaryTokenStreamWriter.Write(String)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 57
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>string</code> value to the stream. '
  example: []
  syntax:
    content: void Write(string s)
    parameters:
    - id: s
      type: System.String
    content.vb: Sub Write(s As String)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char)
  id: Write(System.Char)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Char)
  nameWithType: IBinaryTokenStreamWriter.Write(Char)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 60
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>char</code> value to the stream. '
  example: []
  syntax:
    content: void Write(char c)
    parameters:
    - id: c
      type: System.Char
    content.vb: Sub Write(c As Char)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Boolean)
  nameWithType: IBinaryTokenStreamWriter.Write(Boolean)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 63
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>bool</code> value to the stream. '
  example: []
  syntax:
    content: void Write(bool b)
    parameters:
    - id: b
      type: System.Boolean
    content.vb: Sub Write(b As Boolean)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull
  id: WriteNull
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: WriteNull()
  nameWithType: IBinaryTokenStreamWriter.WriteNull()
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: WriteNull
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 66
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>null</code> value to the stream. '
  example: []
  syntax:
    content: void WriteNull()
    content.vb: Sub WriteNull
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader(Type,Type)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader(Type,Type)
  id: WriteTypeHeader(Type,Type)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: WriteTypeHeader(Type, Type)
  nameWithType: IBinaryTokenStreamWriter.WriteTypeHeader(Type, Type)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader(Type, Type)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: WriteTypeHeader
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 71
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a type header for the specified Type to the stream. '
  example: []
  syntax:
    content: void WriteTypeHeader(Type t, Type expected = null)
    parameters:
    - id: t
      type: Type
      description: Type to write header for.
    - id: expected
      type: Type
      description: Currently expected Type for this stream.
    content.vb: Sub WriteTypeHeader(t As Type, expected As Type = Nothing)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Byte[])
  nameWithType: IBinaryTokenStreamWriter.Write(Byte[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 74
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>byte[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(byte[] b)
    parameters:
    - id: b
      type: System.Byte[]
    content.vb: Sub Write(b As Byte())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Byte())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte())
  name.vb: Write(Byte())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(List{ArraySegment{System.Byte}})
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(List{ArraySegment{System.Byte}})
  id: Write(List{ArraySegment{System.Byte}})
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(List<ArraySegment<Byte>>)
  nameWithType: IBinaryTokenStreamWriter.Write(List<ArraySegment<Byte>>)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(List<ArraySegment<System.Byte>>)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 77
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a list of byte array segments to the stream. '
  example: []
  syntax:
    content: void Write(List<ArraySegment<byte>> bytes)
    parameters:
    - id: bytes
      type: List{ArraySegment{System.Byte}}
    content.vb: Sub Write(bytes As List(Of ArraySegment(Of Byte)))
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(List(Of ArraySegment(Of Byte)))
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(List(Of ArraySegment(Of System.Byte)))
  name.vb: Write(List(Of ArraySegment(Of Byte)))
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  nameWithType: IBinaryTokenStreamWriter.Write(Byte[], Int32, Int32)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 83
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write the specified number of bytes to the stream, starting at the specified offset in the input <code>byte[]</code>. '
  example: []
  syntax:
    content: void Write(byte[] b, int offset, int count)
    parameters:
    - id: b
      type: System.Byte[]
      description: The input data to be written.
    - id: offset
      type: System.Int32
      description: The offset into the inout byte[] to start writing bytes from.
    - id: count
      type: System.Int32
      description: The number of bytes to be written.
    content.vb: Sub Write(b As Byte(), offset As Integer, count As Integer)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Byte(), Int32, Int32)
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16[])
  id: Write(System.Int16[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int16[])
  nameWithType: IBinaryTokenStreamWriter.Write(Int16[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 86
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>Int16[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(short[] i)
    parameters:
    - id: i
      type: System.Int16[]
    content.vb: Sub Write(i As Short())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Int16())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16())
  name.vb: Write(Int16())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32[])
  id: Write(System.Int32[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int32[])
  nameWithType: IBinaryTokenStreamWriter.Write(Int32[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 89
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>Int32[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(int[] i)
    parameters:
    - id: i
      type: System.Int32[]
    content.vb: Sub Write(i As Integer())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Int32())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32())
  name.vb: Write(Int32())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64[])
  id: Write(System.Int64[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Int64[])
  nameWithType: IBinaryTokenStreamWriter.Write(Int64[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 92
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>Int64[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(long[] l)
    parameters:
    - id: l
      type: System.Int64[]
    content.vb: Sub Write(l As Long())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Int64())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64())
  name.vb: Write(Int64())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16[])
  id: Write(System.UInt16[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt16[])
  nameWithType: IBinaryTokenStreamWriter.Write(UInt16[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 95
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt16[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(ushort[] i)
    parameters:
    - id: i
      type: System.UInt16[]
    content.vb: Sub Write(i As UShort())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(UInt16())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16())
  name.vb: Write(UInt16())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32[])
  id: Write(System.UInt32[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt32[])
  nameWithType: IBinaryTokenStreamWriter.Write(UInt32[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 98
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt32[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(uint[] i)
    parameters:
    - id: i
      type: System.UInt32[]
    content.vb: Sub Write(i As UInteger())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(UInt32())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32())
  name.vb: Write(UInt32())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64[])
  id: Write(System.UInt64[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(UInt64[])
  nameWithType: IBinaryTokenStreamWriter.Write(UInt64[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 101
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>UInt64[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(ulong[] l)
    parameters:
    - id: l
      type: System.UInt64[]
    content.vb: Sub Write(l As ULong())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(UInt64())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64())
  name.vb: Write(UInt64())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte[])
  id: Write(System.SByte[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(SByte[])
  nameWithType: IBinaryTokenStreamWriter.Write(SByte[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 104
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>sbyte[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(sbyte[] l)
    parameters:
    - id: l
      type: System.SByte[]
    content.vb: Sub Write(l As SByte())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(SByte())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte())
  name.vb: Write(SByte())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char[])
  id: Write(System.Char[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Char[])
  nameWithType: IBinaryTokenStreamWriter.Write(Char[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 107
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>char[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(char[] l)
    parameters:
    - id: l
      type: System.Char[]
    content.vb: Sub Write(l As Char())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Char())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char())
  name.vb: Write(Char())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean[])
  id: Write(System.Boolean[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Boolean[])
  nameWithType: IBinaryTokenStreamWriter.Write(Boolean[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 110
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>bool[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(bool[] l)
    parameters:
    - id: l
      type: System.Boolean[]
    content.vb: Sub Write(l As Boolean())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Boolean())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean())
  name.vb: Write(Boolean())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double[])
  id: Write(System.Double[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Double[])
  nameWithType: IBinaryTokenStreamWriter.Write(Double[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 113
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>double[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(double[] d)
    parameters:
    - id: d
      type: System.Double[]
    content.vb: Sub Write(d As Double())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Double())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double())
  name.vb: Write(Double())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single[])
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single[])
  id: Write(System.Single[])
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Single[])
  nameWithType: IBinaryTokenStreamWriter.Write(Single[])
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single[])
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 116
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>float[]</code> value to the stream. '
  example: []
  syntax:
    content: void Write(float[] f)
    parameters:
    - id: f
      type: System.Single[]
    content.vb: Sub Write(f As Single())
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  nameWithType.vb: IBinaryTokenStreamWriter.Write(Single())
  fullName.vb: Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single())
  name.vb: Write(Single())
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPEndPoint)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPEndPoint)
  id: Write(IPEndPoint)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(IPEndPoint)
  nameWithType: IBinaryTokenStreamWriter.Write(IPEndPoint)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPEndPoint)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 119
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>IPEndPoint</code> value to the stream. '
  example: []
  syntax:
    content: void Write(IPEndPoint ep)
    parameters:
    - id: ep
      type: IPEndPoint
    content.vb: Sub Write(ep As IPEndPoint)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPAddress)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPAddress)
  id: Write(IPAddress)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(IPAddress)
  nameWithType: IBinaryTokenStreamWriter.Write(IPAddress)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(IPAddress)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 122
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>IPAddress</code> value to the stream. '
  example: []
  syntax:
    content: void Write(IPAddress ip)
    parameters:
    - id: ip
      type: IPAddress
    content.vb: Sub Write(ip As IPAddress)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)
  id: Write(Orleans.Runtime.SiloAddress)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(SiloAddress)
  nameWithType: IBinaryTokenStreamWriter.Write(SiloAddress)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 125
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>SiloAddress</code> value to the stream. '
  example: []
  syntax:
    content: void Write(SiloAddress addr)
    parameters:
    - id: addr
      type: Orleans.Runtime.SiloAddress
    content.vb: Sub Write(addr As SiloAddress)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(TimeSpan)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(TimeSpan)
  id: Write(TimeSpan)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(TimeSpan)
  nameWithType: IBinaryTokenStreamWriter.Write(TimeSpan)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(TimeSpan)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 128
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>TimeSpan</code> value to the stream. '
  example: []
  syntax:
    content: void Write(TimeSpan ts)
    parameters:
    - id: ts
      type: TimeSpan
    content.vb: Sub Write(ts As TimeSpan)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(DateTime)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(DateTime)
  id: Write(DateTime)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(DateTime)
  nameWithType: IBinaryTokenStreamWriter.Write(DateTime)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(DateTime)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 131
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>DataTime</code> value to the stream. '
  example: []
  syntax:
    content: void Write(DateTime dt)
    parameters:
    - id: dt
      type: DateTime
    content.vb: Sub Write(dt As DateTime)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write(Guid)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(Guid)
  id: Write(Guid)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: Write(Guid)
  nameWithType: IBinaryTokenStreamWriter.Write(Guid)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write(Guid)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Write
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 134
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: 'Write a <code>Guid</code> value to the stream. '
  example: []
  syntax:
    content: void Write(Guid id)
    parameters:
    - id: id
      type: Guid
    content.vb: Sub Write(id As Guid)
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)
  commentId: M:Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)
  id: TryWriteSimpleObject(System.Object)
  parent: Orleans.Serialization.IBinaryTokenStreamWriter
  langs:
  - csharp
  - vb
  name: TryWriteSimpleObject(Object)
  nameWithType: IBinaryTokenStreamWriter.TryWriteSimpleObject(Object)
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: TryWriteSimpleObject
    path: src/Orleans.Core.Abstractions/Serialization/IBinaryTokenStreamWriter.cs
    startLine: 141
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Serialization
  summary: "\nTry to write a simple type (non-array) value to the stream.\n"
  example: []
  syntax:
    content: bool TryWriteSimpleObject(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Input object to be written to the output stream.
    return:
      type: System.Boolean
      description: Returns <code>true</code> if the value was successfully written to the output stream.
    content.vb: Function TryWriteSimpleObject(obj As Object) As Boolean
  overload: Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject*
references:
- uid: Orleans.Serialization
  commentId: N:Orleans.Serialization
  isExternal: false
  name: Orleans.Serialization
  nameWithType: Orleans.Serialization
  fullName: Orleans.Serialization
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IBinaryTokenStreamWriter>()
  nameWithType: ImmutableExt.AsImmutable<IBinaryTokenStreamWriter>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Serialization.IBinaryTokenStreamWriter>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IBinaryTokenStreamWriter)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Serialization.IBinaryTokenStreamWriter)()
  name.vb: AsImmutable(Of IBinaryTokenStreamWriter)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IBinaryTokenStreamWriter>
    nameWithType: ImmutableExt.AsImmutable<IBinaryTokenStreamWriter>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Serialization.IBinaryTokenStreamWriter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IBinaryTokenStreamWriter)
    nameWithType: ImmutableExt.AsImmutable(Of IBinaryTokenStreamWriter)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Serialization.IBinaryTokenStreamWriter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes
  isExternal: false
  name: ToBytes
  nameWithType: IBinaryTokenStreamWriter.ToBytes
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes
- uid: List{ArraySegment{System.Byte}}
  commentId: '!:List{ArraySegment{System.Byte}}'
  definition: List`1
  name: List<ArraySegment<Byte>>
  nameWithType: List<ArraySegment<Byte>>
  fullName: List<ArraySegment<System.Byte>>
  nameWithType.vb: List(Of ArraySegment(Of Byte))
  fullName.vb: List(Of ArraySegment(Of System.Byte))
  name.vb: List(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray
  isExternal: false
  name: ToByteArray
  nameWithType: IBinaryTokenStreamWriter.ToByteArray
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers
  isExternal: false
  name: ReleaseBuffers
  nameWithType: IBinaryTokenStreamWriter.ReleaseBuffers
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
  isExternal: false
  name: CurrentOffset
  nameWithType: IBinaryTokenStreamWriter.CurrentOffset
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.Write*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.Write
  isExternal: false
  name: Write
  nameWithType: IBinaryTokenStreamWriter.Write
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.Write
- uid: System.Int16
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.SByte
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Single
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Decimal
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull
  isExternal: false
  name: WriteNull
  nameWithType: IBinaryTokenStreamWriter.WriteNull
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader
  isExternal: false
  name: WriteTypeHeader
  nameWithType: IBinaryTokenStreamWriter.WriteTypeHeader
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Int16[]
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullName.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64[]
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt16[]
  name: UInt16[]
  nameWithType: UInt16[]
  fullName: System.UInt16[]
  nameWithType.vb: UInt16()
  fullName.vb: System.UInt16()
  name.vb: UInt16()
  spec.csharp:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt32[]
  name: UInt32[]
  nameWithType: UInt32[]
  fullName: System.UInt32[]
  nameWithType.vb: UInt32()
  fullName.vb: System.UInt32()
  name.vb: UInt32()
  spec.csharp:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt64[]
  name: UInt64[]
  nameWithType: UInt64[]
  fullName: System.UInt64[]
  nameWithType.vb: UInt64()
  fullName.vb: System.UInt64()
  name.vb: UInt64()
  spec.csharp:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.SByte[]
  name: SByte[]
  nameWithType: SByte[]
  fullName: System.SByte[]
  nameWithType.vb: SByte()
  fullName.vb: System.SByte()
  name.vb: SByte()
  spec.csharp:
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean[]
  name: Boolean[]
  nameWithType: Boolean[]
  fullName: System.Boolean[]
  nameWithType.vb: Boolean()
  fullName.vb: System.Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double[]
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single[]
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: IPAddress
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: IPAddress
- uid: Orleans.Runtime.SiloAddress
  commentId: T:Orleans.Runtime.SiloAddress
  parent: Orleans.Runtime
  isExternal: false
  name: SiloAddress
  nameWithType: SiloAddress
  fullName: Orleans.Runtime.SiloAddress
- uid: Orleans.Runtime
  commentId: N:Orleans.Runtime
  isExternal: false
  name: Orleans.Runtime
  nameWithType: Orleans.Runtime
  fullName: Orleans.Runtime
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject*
  commentId: Overload:Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject
  isExternal: false
  name: TryWriteSimpleObject
  nameWithType: IBinaryTokenStreamWriter.TryWriteSimpleObject
  fullName: Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
