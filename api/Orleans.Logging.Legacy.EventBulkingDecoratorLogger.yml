### YamlMime:ManagedReference
items:
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  commentId: T:Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  id: EventBulkingDecoratorLogger
  parent: Orleans.Logging.Legacy
  children:
  - Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor(Orleans.Logging.Legacy.EventBulkingOptions,ILogger)
  - Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope``1(``0)
  - Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled(LogLevel)
  - Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  langs:
  - csharp
  - vb
  name: EventBulkingDecoratorLogger
  nameWithType: EventBulkingDecoratorLogger
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  type: Class
  source:
    remote:
      path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: EventBulkingDecoratorLogger
    path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
    startLine: 44
  assemblies:
  - Orleans.Core.Legacy
  namespace: Orleans.Logging.Legacy
  summary: "\nOrleansLoggingDecorator class. User can plug in their own ILogger implementation into this decorator class to add event bulking feature on top of their logger. \nEvent bulking feature will just log eventId count if the same eventId has appear more than BulkMessageLimit in a certain BulkMessageInterval.\n"
  example: []
  syntax:
    content: 'public class EventBulkingDecoratorLogger : ILogger'
    content.vb: >-
      Public Class EventBulkingDecoratorLogger

          Inherits ILogger
  inheritance:
  - System.Object
  extensionMethods:
  - Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor(Orleans.Logging.Legacy.EventBulkingOptions,ILogger)
  commentId: M:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor(Orleans.Logging.Legacy.EventBulkingOptions,ILogger)
  id: '#ctor(Orleans.Logging.Legacy.EventBulkingOptions,ILogger)'
  parent: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  langs:
  - csharp
  - vb
  name: EventBulkingDecoratorLogger(EventBulkingOptions, ILogger)
  nameWithType: EventBulkingDecoratorLogger.EventBulkingDecoratorLogger(EventBulkingOptions, ILogger)
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.EventBulkingDecoratorLogger(Orleans.Logging.Legacy.EventBulkingOptions, ILogger)
  type: Constructor
  source:
    remote:
      path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: .ctor
    path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
    startLine: 62
  assemblies:
  - Orleans.Core.Legacy
  namespace: Orleans.Logging.Legacy
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public EventBulkingDecoratorLogger(EventBulkingOptions config, ILogger decoratedLogger)
    parameters:
    - id: config
      type: Orleans.Logging.Legacy.EventBulkingOptions
      description: ''
    - id: decoratedLogger
      type: ILogger
      description: ''
    content.vb: Public Sub New(config As EventBulkingOptions, decoratedLogger As ILogger)
  overload: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  commentId: M:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  id: Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  parent: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: EventBulkingDecoratorLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Log
    path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
    startLine: 69
  assemblies:
  - Orleans.Core.Legacy
  namespace: Orleans.Logging.Legacy
  example: []
  syntax:
    content: public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    parameters:
    - id: logLevel
      type: LogLevel
    - id: eventId
      type: EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: Exception
    - id: formatter
      type: Func{{TState},Exception,System.String}
    typeParameters:
    - id: TState
    content.vb: Public Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
  overload: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log*
  nameWithType.vb: EventBulkingDecoratorLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled(LogLevel)
  commentId: M:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled(LogLevel)
  id: IsEnabled(LogLevel)
  parent: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: EventBulkingDecoratorLogger.IsEnabled(LogLevel)
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled(LogLevel)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IsEnabled
    path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
    startLine: 77
  assemblies:
  - Orleans.Core.Legacy
  namespace: Orleans.Logging.Legacy
  example: []
  syntax:
    content: public virtual bool IsEnabled(LogLevel logLevel)
    parameters:
    - id: logLevel
      type: LogLevel
    return:
      type: System.Boolean
    content.vb: Public Overridable Function IsEnabled(logLevel As LogLevel) As Boolean
  overload: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope``1(``0)
  commentId: M:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Orleans.Logging.Legacy.EventBulkingDecoratorLogger
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: EventBulkingDecoratorLogger.BeginScope<TState>(TState)
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: BeginScope
    path: src/Orleans.Core.Legacy/Logging/EventBulkingDecoratorLogger.cs
    startLine: 83
  assemblies:
  - Orleans.Core.Legacy
  namespace: Orleans.Logging.Legacy
  example: []
  syntax:
    content: public IDisposable BeginScope<TState>(TState state)
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: IDisposable
    content.vb: Public Function BeginScope(Of TState)(state As TState) As IDisposable
  overload: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope*
  nameWithType.vb: EventBulkingDecoratorLogger.BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
references:
- uid: Orleans.Logging.Legacy
  commentId: N:Orleans.Logging.Legacy
  isExternal: false
  name: Orleans.Logging.Legacy
  nameWithType: Orleans.Logging.Legacy
  fullName: Orleans.Logging.Legacy
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<EventBulkingDecoratorLogger>()
  nameWithType: ImmutableExt.AsImmutable<EventBulkingDecoratorLogger>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Logging.Legacy.EventBulkingDecoratorLogger>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of EventBulkingDecoratorLogger)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Logging.Legacy.EventBulkingDecoratorLogger)()
  name.vb: AsImmutable(Of EventBulkingDecoratorLogger)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<EventBulkingDecoratorLogger>
    nameWithType: ImmutableExt.AsImmutable<EventBulkingDecoratorLogger>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Logging.Legacy.EventBulkingDecoratorLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of EventBulkingDecoratorLogger)
    nameWithType: ImmutableExt.AsImmutable(Of EventBulkingDecoratorLogger)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Logging.Legacy.EventBulkingDecoratorLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor*
  commentId: Overload:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.#ctor
  isExternal: false
  name: EventBulkingDecoratorLogger
  nameWithType: EventBulkingDecoratorLogger.EventBulkingDecoratorLogger
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.EventBulkingDecoratorLogger
- uid: Orleans.Logging.Legacy.EventBulkingOptions
  commentId: T:Orleans.Logging.Legacy.EventBulkingOptions
  parent: Orleans.Logging.Legacy
  isExternal: false
  name: EventBulkingOptions
  nameWithType: EventBulkingOptions
  fullName: Orleans.Logging.Legacy.EventBulkingOptions
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log*
  commentId: Overload:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log
  isExternal: false
  name: Log
  nameWithType: EventBulkingDecoratorLogger.Log
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.Log
- uid: LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: LogLevel
- uid: EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Func{{TState},Exception,System.String}
  commentId: '!:Func{``0,Exception,System.String}'
  definition: Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: Func<TState, Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullName.vb: Func(Of TState, Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled*
  commentId: Overload:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled
  isExternal: false
  name: IsEnabled
  nameWithType: EventBulkingDecoratorLogger.IsEnabled
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.IsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope*
  commentId: Overload:Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope
  isExternal: false
  name: BeginScope
  nameWithType: EventBulkingDecoratorLogger.BeginScope
  fullName: Orleans.Logging.Legacy.EventBulkingDecoratorLogger.BeginScope
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
