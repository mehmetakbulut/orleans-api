### YamlMime:ManagedReference
items:
- uid: Orleans.CodeGeneration.IGrainMethodInvoker
  commentId: T:Orleans.CodeGeneration.IGrainMethodInvoker
  id: IGrainMethodInvoker
  parent: Orleans.CodeGeneration
  children:
  - Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
  - Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
  - Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)
  langs:
  - csharp
  - vb
  name: IGrainMethodInvoker
  nameWithType: IGrainMethodInvoker
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IGrainMethodInvoker
    path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
    startLine: 8
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.CodeGeneration
  summary: "\nAn implementation of this interface is generated for every grain interface as part of the client-side code generation.\n"
  example: []
  syntax:
    content: public interface IGrainMethodInvoker
    content.vb: Public Interface IGrainMethodInvoker
  extensionMethods:
  - Orleans.CodeGeneration.IGrainMethodInvoker.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
  commentId: P:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
  id: InterfaceId
  parent: Orleans.CodeGeneration.IGrainMethodInvoker
  langs:
  - csharp
  - vb
  name: InterfaceId
  nameWithType: IGrainMethodInvoker.InterfaceId
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: InterfaceId
    path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
    startLine: 11
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.CodeGeneration
  summary: 'The interface id that this invoker supports. '
  example: []
  syntax:
    content: int InterfaceId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property InterfaceId As Integer
  overload: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
  commentId: P:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
  id: InterfaceVersion
  parent: Orleans.CodeGeneration.IGrainMethodInvoker
  langs:
  - csharp
  - vb
  name: InterfaceVersion
  nameWithType: IGrainMethodInvoker.InterfaceVersion
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: InterfaceVersion
    path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
    startLine: 13
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.CodeGeneration
  syntax:
    content: ushort InterfaceVersion { get; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: ReadOnly Property InterfaceVersion As UShort
  overload: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)
  commentId: M:Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)
  id: Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)
  parent: Orleans.CodeGeneration.IGrainMethodInvoker
  langs:
  - csharp
  - vb
  name: Invoke(IAddressable, InvokeMethodRequest)
  nameWithType: IGrainMethodInvoker.Invoke(IAddressable, InvokeMethodRequest)
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable, Orleans.CodeGeneration.InvokeMethodRequest)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Invoke
    path: src/Orleans.Core.Abstractions/CodeGeneration/IGrainMethodInvoker.cs
    startLine: 22
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.CodeGeneration
  summary: "\nInvoke a grain method.\nInvoker classes in generated code implement this method to provide a method call jump-table to map invoke data to a strongly typed call to the correct method on the correct interface.\n"
  example: []
  syntax:
    content: Task<object> Invoke(IAddressable grain, InvokeMethodRequest request)
    parameters:
    - id: grain
      type: Orleans.Runtime.IAddressable
      description: Reference to the grain to be invoked.
    - id: request
      type: Orleans.CodeGeneration.InvokeMethodRequest
      description: The request being invoked.
    return:
      type: Task{System.Object}
      description: Value promise for the result of the method invoke.
    content.vb: Function Invoke(grain As IAddressable, request As InvokeMethodRequest) As Task(Of Object)
  overload: Orleans.CodeGeneration.IGrainMethodInvoker.Invoke*
references:
- uid: Orleans.CodeGeneration
  commentId: N:Orleans.CodeGeneration
  isExternal: false
  name: Orleans.CodeGeneration
  nameWithType: Orleans.CodeGeneration
  fullName: Orleans.CodeGeneration
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IGrainMethodInvoker>()
  nameWithType: ImmutableExt.AsImmutable<IGrainMethodInvoker>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.CodeGeneration.IGrainMethodInvoker>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IGrainMethodInvoker)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.CodeGeneration.IGrainMethodInvoker)()
  name.vb: AsImmutable(Of IGrainMethodInvoker)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IGrainMethodInvoker>
    nameWithType: ImmutableExt.AsImmutable<IGrainMethodInvoker>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.CodeGeneration.IGrainMethodInvoker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IGrainMethodInvoker)
    nameWithType: ImmutableExt.AsImmutable(Of IGrainMethodInvoker)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.CodeGeneration.IGrainMethodInvoker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId*
  commentId: Overload:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
  isExternal: false
  name: InterfaceId
  nameWithType: IGrainMethodInvoker.InterfaceId
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion*
  commentId: Overload:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
  isExternal: false
  name: InterfaceVersion
  nameWithType: IGrainMethodInvoker.InterfaceVersion
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceVersion
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Orleans.CodeGeneration.IGrainMethodInvoker.Invoke*
  commentId: Overload:Orleans.CodeGeneration.IGrainMethodInvoker.Invoke
  isExternal: false
  name: Invoke
  nameWithType: IGrainMethodInvoker.Invoke
  fullName: Orleans.CodeGeneration.IGrainMethodInvoker.Invoke
- uid: Orleans.Runtime.IAddressable
  commentId: T:Orleans.Runtime.IAddressable
  parent: Orleans.Runtime
  isExternal: false
  name: IAddressable
  nameWithType: IAddressable
  fullName: Orleans.Runtime.IAddressable
- uid: Orleans.CodeGeneration.InvokeMethodRequest
  commentId: T:Orleans.CodeGeneration.InvokeMethodRequest
  parent: Orleans.CodeGeneration
  isExternal: false
  name: InvokeMethodRequest
  nameWithType: InvokeMethodRequest
  fullName: Orleans.CodeGeneration.InvokeMethodRequest
- uid: Task{System.Object}
  commentId: '!:Task{System.Object}'
  definition: Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime
  commentId: N:Orleans.Runtime
  isExternal: false
  name: Orleans.Runtime
  nameWithType: Orleans.Runtime
  fullName: Orleans.Runtime
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
