### YamlMime:ManagedReference
items:
- uid: Orleans.Streams.IAsyncStream`1
  commentId: T:Orleans.Streams.IAsyncStream`1
  id: IAsyncStream`1
  parent: Orleans.Streams
  children:
  - Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles
  - Orleans.Streams.IAsyncStream`1.IsRewindable
  - Orleans.Streams.IAsyncStream`1.ProviderName
  langs:
  - csharp
  - vb
  name: IAsyncStream<T>
  nameWithType: IAsyncStream<T>
  fullName: Orleans.Streams.IAsyncStream<T>
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IAsyncStream
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
    startLine: 12
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nThis interface represents an object that serves as a distributed rendevous between producers and consumers.\nIt is similar to a Reactive Framework <pre><code>Subject</code></pre> and implements\n<pre><code>IObserver</code></pre> nor <pre><code>IObservable</code></pre> interfaces.\n"
  example: []
  syntax:
    content: 'public interface IAsyncStream<T> : IStreamIdentity, IEquatable<IAsyncStream<T>>, IComparable<IAsyncStream<T>>, IAsyncObservable<T>, IAsyncBatchObserver<T>, IAsyncObserver<T>'
    typeParameters:
    - id: T
      description: The type of object that flows through the stream.
    content.vb: >-
      Public Interface IAsyncStream(Of T)

          Inherits IStreamIdentity, IEquatable(Of IAsyncStream(Of T)), IComparable(Of IAsyncStream(Of T)), IAsyncObservable(Of T), IAsyncBatchObserver(Of T)
  inheritedMembers:
  - Orleans.Streams.IStreamIdentity.Guid
  - Orleans.Streams.IStreamIdentity.Namespace
  - Orleans.Streams.IAsyncObservable{{T}}.SubscribeAsync(Orleans.Streams.IAsyncObserver{{T}})
  - Orleans.Streams.IAsyncObservable{{T}}.SubscribeAsync(Orleans.Streams.IAsyncObserver{{T}},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncBatchObserver{{T}}.OnNextBatchAsync(IEnumerable{{T}},Orleans.Streams.StreamSequenceToken)
  - Orleans.Streams.IAsyncObserver{{T}}.OnNextAsync({T},Orleans.Streams.StreamSequenceToken)
  - Orleans.Streams.IAsyncObserver{{T}}.OnCompletedAsync
  - Orleans.Streams.IAsyncObserver{{T}}.OnErrorAsync(Exception)
  extensionMethods:
  - Orleans.Streams.IAsyncStream`1.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task})
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  - Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  nameWithType.vb: IAsyncStream(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Orleans.Streams.IAsyncStream(Of T)
  name.vb: IAsyncStream(Of T)
- uid: Orleans.Streams.IAsyncStream`1.IsRewindable
  commentId: P:Orleans.Streams.IAsyncStream`1.IsRewindable
  id: IsRewindable
  parent: Orleans.Streams.IAsyncStream`1
  langs:
  - csharp
  - vb
  name: IsRewindable
  nameWithType: IAsyncStream<T>.IsRewindable
  fullName: Orleans.Streams.IAsyncStream<T>.IsRewindable
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IsRewindable
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
    startLine: 18
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nDetermines whether this is a rewindable stream - supports subscribing from previous point in time.\n"
  example: []
  syntax:
    content: bool IsRewindable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: True if this is a rewindable stream, false otherwise.
    content.vb: ReadOnly Property IsRewindable As Boolean
  overload: Orleans.Streams.IAsyncStream`1.IsRewindable*
  nameWithType.vb: IAsyncStream(Of T).IsRewindable
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).IsRewindable
- uid: Orleans.Streams.IAsyncStream`1.ProviderName
  commentId: P:Orleans.Streams.IAsyncStream`1.ProviderName
  id: ProviderName
  parent: Orleans.Streams.IAsyncStream`1
  langs:
  - csharp
  - vb
  name: ProviderName
  nameWithType: IAsyncStream<T>.ProviderName
  fullName: Orleans.Streams.IAsyncStream<T>.ProviderName
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ProviderName
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
    startLine: 21
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: 'Stream Provider Name. '
  example: []
  syntax:
    content: string ProviderName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ProviderName As String
  overload: Orleans.Streams.IAsyncStream`1.ProviderName*
  nameWithType.vb: IAsyncStream(Of T).ProviderName
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).ProviderName
- uid: Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles
  commentId: M:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles
  id: GetAllSubscriptionHandles
  parent: Orleans.Streams.IAsyncStream`1
  langs:
  - csharp
  - vb
  name: GetAllSubscriptionHandles()
  nameWithType: IAsyncStream<T>.GetAllSubscriptionHandles()
  fullName: Orleans.Streams.IAsyncStream<T>.GetAllSubscriptionHandles()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetAllSubscriptionHandles
    path: src/Orleans.Core.Abstractions/Streams/Core/IAsyncStream.cs
    startLine: 27
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Streams
  summary: "\nRetrieves a list of all active subscriptions created by the caller for this stream.\n"
  example: []
  syntax:
    content: Task<IList<StreamSubscriptionHandle<T>>> GetAllSubscriptionHandles()
    return:
      type: Task{IList{Orleans.Streams.StreamSubscriptionHandle{{T}}}}
      description: ''
    content.vb: Function GetAllSubscriptionHandles As Task(Of IList(Of StreamSubscriptionHandle(Of T)))
  overload: Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles*
  nameWithType.vb: IAsyncStream(Of T).GetAllSubscriptionHandles()
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).GetAllSubscriptionHandles()
references:
- uid: Orleans.Streams
  commentId: N:Orleans.Streams
  isExternal: false
  name: Orleans.Streams
  nameWithType: Orleans.Streams
  fullName: Orleans.Streams
- uid: Orleans.Streams.IStreamIdentity.Guid
  commentId: P:Orleans.Streams.IStreamIdentity.Guid
  parent: Orleans.Streams.IStreamIdentity
  isExternal: false
  name: Guid
  nameWithType: IStreamIdentity.Guid
  fullName: Orleans.Streams.IStreamIdentity.Guid
- uid: Orleans.Streams.IStreamIdentity.Namespace
  commentId: P:Orleans.Streams.IStreamIdentity.Namespace
  parent: Orleans.Streams.IStreamIdentity
  isExternal: false
  name: Namespace
  nameWithType: IStreamIdentity.Namespace
  fullName: Orleans.Streams.IStreamIdentity.Namespace
- uid: Orleans.Streams.IAsyncObservable{{T}}.SubscribeAsync(Orleans.Streams.IAsyncObserver{{T}})
  commentId: M:Orleans.Streams.IAsyncObservable{`0}.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  parent: Orleans.Streams.IAsyncObservable{{T}}
  definition: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  name: SubscribeAsync(IAsyncObserver<T>)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>)
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T))
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T))
  name.vb: SubscribeAsync(IAsyncObserver(Of T))
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
    name: SubscribeAsync
    nameWithType: IAsyncObservable<T>.SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
    name: SubscribeAsync
    nameWithType: IAsyncObservable(Of T).SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{{T}}.SubscribeAsync(Orleans.Streams.IAsyncObserver{{T}},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.IAsyncObservable{`0}.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.IAsyncObservable{{T}}
  definition: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync
    nameWithType: IAsyncObservable<T>.SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync
    nameWithType: IAsyncObservable(Of T).SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncBatchObserver{{T}}.OnNextBatchAsync(IEnumerable{{T}},Orleans.Streams.StreamSequenceToken)
  commentId: M:Orleans.Streams.IAsyncBatchObserver{`0}.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
  parent: Orleans.Streams.IAsyncBatchObserver{{T}}
  definition: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
  name: OnNextBatchAsync(IEnumerable<T>, StreamSequenceToken)
  nameWithType: IAsyncBatchObserver<T>.OnNextBatchAsync(IEnumerable<T>, StreamSequenceToken)
  fullName: Orleans.Streams.IAsyncBatchObserver<T>.OnNextBatchAsync(IEnumerable<T>, Orleans.Streams.StreamSequenceToken)
  nameWithType.vb: IAsyncBatchObserver(Of T).OnNextBatchAsync(IEnumerable(Of T), StreamSequenceToken)
  fullName.vb: Orleans.Streams.IAsyncBatchObserver(Of T).OnNextBatchAsync(IEnumerable(Of T), Orleans.Streams.StreamSequenceToken)
  name.vb: OnNextBatchAsync(IEnumerable(Of T), StreamSequenceToken)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
    name: OnNextBatchAsync
    nameWithType: IAsyncBatchObserver<T>.OnNextBatchAsync
    fullName: Orleans.Streams.IAsyncBatchObserver<T>.OnNextBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
    name: OnNextBatchAsync
    nameWithType: IAsyncBatchObserver(Of T).OnNextBatchAsync
    fullName: Orleans.Streams.IAsyncBatchObserver(Of T).OnNextBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver{{T}}.OnNextAsync({T},Orleans.Streams.StreamSequenceToken)
  commentId: M:Orleans.Streams.IAsyncObserver{`0}.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
  parent: Orleans.Streams.IAsyncObserver{{T}}
  definition: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
  name: OnNextAsync(T, StreamSequenceToken)
  nameWithType: IAsyncObserver<T>.OnNextAsync(T, StreamSequenceToken)
  fullName: Orleans.Streams.IAsyncObserver<T>.OnNextAsync(T, Orleans.Streams.StreamSequenceToken)
  nameWithType.vb: IAsyncObserver(Of T).OnNextAsync(T, StreamSequenceToken)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnNextAsync(T, Orleans.Streams.StreamSequenceToken)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
    name: OnNextAsync
    nameWithType: IAsyncObserver<T>.OnNextAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnNextAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
    name: OnNextAsync
    nameWithType: IAsyncObserver(Of T).OnNextAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnNextAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver{{T}}.OnCompletedAsync
  commentId: M:Orleans.Streams.IAsyncObserver{`0}.OnCompletedAsync
  parent: Orleans.Streams.IAsyncObserver{{T}}
  definition: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
  name: OnCompletedAsync()
  nameWithType: IAsyncObserver<T>.OnCompletedAsync()
  fullName: Orleans.Streams.IAsyncObserver<T>.OnCompletedAsync()
  nameWithType.vb: IAsyncObserver(Of T).OnCompletedAsync()
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnCompletedAsync()
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
    name: OnCompletedAsync
    nameWithType: IAsyncObserver<T>.OnCompletedAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnCompletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
    name: OnCompletedAsync
    nameWithType: IAsyncObserver(Of T).OnCompletedAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnCompletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver{{T}}.OnErrorAsync(Exception)
  commentId: M:Orleans.Streams.IAsyncObserver{`0}.OnErrorAsync(Exception)
  parent: Orleans.Streams.IAsyncObserver{{T}}
  definition: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
  name: OnErrorAsync(Exception)
  nameWithType: IAsyncObserver<T>.OnErrorAsync(Exception)
  fullName: Orleans.Streams.IAsyncObserver<T>.OnErrorAsync(Exception)
  nameWithType.vb: IAsyncObserver(Of T).OnErrorAsync(Exception)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnErrorAsync(Exception)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
    name: OnErrorAsync
    nameWithType: IAsyncObserver<T>.OnErrorAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnErrorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
    name: OnErrorAsync
    nameWithType: IAsyncObserver(Of T).OnErrorAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnErrorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncStream`1.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IAsyncStream<T>>()
  nameWithType: ImmutableExt.AsImmutable<IAsyncStream<T>>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Streams.IAsyncStream<T>>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IAsyncStream(Of T))()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Streams.IAsyncStream(Of T))()
  name.vb: AsImmutable(Of IAsyncStream(Of T))()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IAsyncStream<T>>
    nameWithType: ImmutableExt.AsImmutable<IAsyncStream<T>>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Streams.IAsyncStream<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IAsyncStream(Of T))
    nameWithType: ImmutableExt.AsImmutable(Of IAsyncStream(Of T))
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Streams.IAsyncStream(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task))
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{`0}.Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{{T},Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  parent: Orleans.Streams.AsyncObservableExtensions
  definition: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  name: SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Func<T, Orleans.Streams.StreamSequenceToken, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IStreamIdentity
  commentId: T:Orleans.Streams.IStreamIdentity
  parent: Orleans.Streams
  isExternal: false
  name: IStreamIdentity
  nameWithType: IStreamIdentity
  fullName: Orleans.Streams.IStreamIdentity
- uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  commentId: M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
  isExternal: false
  name: SubscribeAsync(IAsyncObserver<T>)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>)
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T))
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T))
  name.vb: SubscribeAsync(IAsyncObserver(Of T))
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
    name: SubscribeAsync
    nameWithType: IAsyncObservable<T>.SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})
    name: SubscribeAsync
    nameWithType: IAsyncObservable(Of T).SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable{{T}}
  commentId: T:Orleans.Streams.IAsyncObservable{`0}
  parent: Orleans.Streams
  definition: Orleans.Streams.IAsyncObservable`1
  name: IAsyncObservable<T>
  nameWithType: IAsyncObservable<T>
  fullName: Orleans.Streams.IAsyncObservable<T>
  nameWithType.vb: IAsyncObservable(Of T)
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T)
  name.vb: IAsyncObservable(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: IAsyncObservable<T>.SubscribeAsync(IAsyncObserver<T>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync(Orleans.Streams.IAsyncObserver<T>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: IAsyncObservable(Of T).SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync(Orleans.Streams.IAsyncObserver(Of T), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(IAsyncObserver(Of T), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync
    nameWithType: IAsyncObservable<T>.SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable<T>.SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync
    nameWithType: IAsyncObservable(Of T).SubscribeAsync
    fullName: Orleans.Streams.IAsyncObservable(Of T).SubscribeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
  commentId: M:Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
  isExternal: true
  name: OnNextBatchAsync(IEnumerable<T>, StreamSequenceToken)
  nameWithType: IAsyncBatchObserver<T>.OnNextBatchAsync(IEnumerable<T>, StreamSequenceToken)
  fullName: Orleans.Streams.IAsyncBatchObserver<T>.OnNextBatchAsync(IEnumerable<T>, Orleans.Streams.StreamSequenceToken)
  nameWithType.vb: IAsyncBatchObserver(Of T).OnNextBatchAsync(IEnumerable(Of T), StreamSequenceToken)
  fullName.vb: Orleans.Streams.IAsyncBatchObserver(Of T).OnNextBatchAsync(IEnumerable(Of T), Orleans.Streams.StreamSequenceToken)
  name.vb: OnNextBatchAsync(IEnumerable(Of T), StreamSequenceToken)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
    name: OnNextBatchAsync
    nameWithType: IAsyncBatchObserver<T>.OnNextBatchAsync
    fullName: Orleans.Streams.IAsyncBatchObserver<T>.OnNextBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(IEnumerable{`0},Orleans.Streams.StreamSequenceToken)
    name: OnNextBatchAsync
    nameWithType: IAsyncBatchObserver(Of T).OnNextBatchAsync
    fullName: Orleans.Streams.IAsyncBatchObserver(Of T).OnNextBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncBatchObserver{{T}}
  commentId: T:Orleans.Streams.IAsyncBatchObserver{`0}
  parent: Orleans.Streams
  definition: Orleans.Streams.IAsyncBatchObserver`1
  name: IAsyncBatchObserver<T>
  nameWithType: IAsyncBatchObserver<T>
  fullName: Orleans.Streams.IAsyncBatchObserver<T>
  nameWithType.vb: IAsyncBatchObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncBatchObserver(Of T)
  name.vb: IAsyncBatchObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncBatchObserver`1
    name: IAsyncBatchObserver
    nameWithType: IAsyncBatchObserver
    fullName: Orleans.Streams.IAsyncBatchObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncBatchObserver`1
    name: IAsyncBatchObserver
    nameWithType: IAsyncBatchObserver
    fullName: Orleans.Streams.IAsyncBatchObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
  commentId: M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
  isExternal: false
  name: OnNextAsync(T, StreamSequenceToken)
  nameWithType: IAsyncObserver<T>.OnNextAsync(T, StreamSequenceToken)
  fullName: Orleans.Streams.IAsyncObserver<T>.OnNextAsync(T, Orleans.Streams.StreamSequenceToken)
  nameWithType.vb: IAsyncObserver(Of T).OnNextAsync(T, StreamSequenceToken)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnNextAsync(T, Orleans.Streams.StreamSequenceToken)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
    name: OnNextAsync
    nameWithType: IAsyncObserver<T>.OnNextAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnNextAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)
    name: OnNextAsync
    nameWithType: IAsyncObserver(Of T).OnNextAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnNextAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver{{T}}
  commentId: T:Orleans.Streams.IAsyncObserver{`0}
  parent: Orleans.Streams
  definition: Orleans.Streams.IAsyncObserver`1
  name: IAsyncObserver<T>
  nameWithType: IAsyncObserver<T>
  fullName: Orleans.Streams.IAsyncObserver<T>
  nameWithType.vb: IAsyncObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T)
  name.vb: IAsyncObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
  commentId: M:Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
  isExternal: false
  name: OnCompletedAsync()
  nameWithType: IAsyncObserver<T>.OnCompletedAsync()
  fullName: Orleans.Streams.IAsyncObserver<T>.OnCompletedAsync()
  nameWithType.vb: IAsyncObserver(Of T).OnCompletedAsync()
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnCompletedAsync()
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
    name: OnCompletedAsync
    nameWithType: IAsyncObserver<T>.OnCompletedAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnCompletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnCompletedAsync
    name: OnCompletedAsync
    nameWithType: IAsyncObserver(Of T).OnCompletedAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnCompletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
  commentId: M:Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
  isExternal: true
  name: OnErrorAsync(Exception)
  nameWithType: IAsyncObserver<T>.OnErrorAsync(Exception)
  fullName: Orleans.Streams.IAsyncObserver<T>.OnErrorAsync(Exception)
  nameWithType.vb: IAsyncObserver(Of T).OnErrorAsync(Exception)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T).OnErrorAsync(Exception)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
    name: OnErrorAsync
    nameWithType: IAsyncObserver<T>.OnErrorAsync
    fullName: Orleans.Streams.IAsyncObserver<T>.OnErrorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1.OnErrorAsync(Exception)
    name: OnErrorAsync
    nameWithType: IAsyncObserver(Of T).OnErrorAsync
    fullName: Orleans.Streams.IAsyncObserver(Of T).OnErrorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions
  commentId: T:Orleans.Streams.AsyncObservableExtensions
  parent: Orleans.Streams
  isExternal: false
  name: AsyncObservableExtensions
  nameWithType: AsyncObservableExtensions
  fullName: Orleans.Streams.AsyncObservableExtensions
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task))
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task))
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task))
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task})
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Exception, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Exception, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Exception, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Exception, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Exception,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, Func<Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Func<Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Func(Of Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), Func(Of Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Func{Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  commentId: M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
  isExternal: true
  name: SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  nameWithType: AsyncObservableExtensions.SubscribeAsync<T>(IAsyncObservable<T>, Func<T, StreamSequenceToken, Task>, StreamSequenceToken, StreamFilterPredicate, Object)
  fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>(Orleans.Streams.IAsyncObservable<T>, Func<T, Orleans.Streams.StreamSequenceToken, Task>, Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  nameWithType.vb: AsyncObservableExtensions.SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  fullName.vb: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)(Orleans.Streams.IAsyncObservable(Of T), Func(Of T, Orleans.Streams.StreamSequenceToken, Task), Orleans.Streams.StreamSequenceToken, Orleans.Streams.StreamFilterPredicate, System.Object)
  name.vb: SubscribeAsync(Of T)(IAsyncObservable(Of T), Func(Of T, StreamSequenceToken, Task), StreamSequenceToken, StreamFilterPredicate, Object)
  spec.csharp:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync<T>
    nameWithType: AsyncObservableExtensions.SubscribeAsync<T>
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},Func{``0,Orleans.Streams.StreamSequenceToken,Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)
    name: SubscribeAsync(Of T)
    nameWithType: AsyncObservableExtensions.SubscribeAsync(Of T)
    fullName: Orleans.Streams.AsyncObservableExtensions.SubscribeAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamSequenceToken
    name: StreamSequenceToken
    nameWithType: StreamSequenceToken
    fullName: Orleans.Streams.StreamSequenceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Streams.StreamFilterPredicate
    name: StreamFilterPredicate
    nameWithType: StreamFilterPredicate
    fullName: Orleans.Streams.StreamFilterPredicate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObservable`1
  commentId: T:Orleans.Streams.IAsyncObservable`1
  isExternal: false
  name: IAsyncObservable<T>
  nameWithType: IAsyncObservable<T>
  fullName: Orleans.Streams.IAsyncObservable<T>
  nameWithType.vb: IAsyncObservable(Of T)
  fullName.vb: Orleans.Streams.IAsyncObservable(Of T)
  name.vb: IAsyncObservable(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObservable`1
    name: IAsyncObservable
    nameWithType: IAsyncObservable
    fullName: Orleans.Streams.IAsyncObservable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncBatchObserver`1
  commentId: T:Orleans.Streams.IAsyncBatchObserver`1
  isExternal: false
  name: IAsyncBatchObserver<T>
  nameWithType: IAsyncBatchObserver<T>
  fullName: Orleans.Streams.IAsyncBatchObserver<T>
  nameWithType.vb: IAsyncBatchObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncBatchObserver(Of T)
  name.vb: IAsyncBatchObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncBatchObserver`1
    name: IAsyncBatchObserver
    nameWithType: IAsyncBatchObserver
    fullName: Orleans.Streams.IAsyncBatchObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncBatchObserver`1
    name: IAsyncBatchObserver
    nameWithType: IAsyncBatchObserver
    fullName: Orleans.Streams.IAsyncBatchObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Streams.IAsyncObserver`1
  commentId: T:Orleans.Streams.IAsyncObserver`1
  isExternal: false
  name: IAsyncObserver<T>
  nameWithType: IAsyncObserver<T>
  fullName: Orleans.Streams.IAsyncObserver<T>
  nameWithType.vb: IAsyncObserver(Of T)
  fullName.vb: Orleans.Streams.IAsyncObserver(Of T)
  name.vb: IAsyncObserver(Of T)
  spec.csharp:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.Streams.IAsyncObserver`1
    name: IAsyncObserver
    nameWithType: IAsyncObserver
    fullName: Orleans.Streams.IAsyncObserver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Streams.IAsyncStream`1.IsRewindable*
  commentId: Overload:Orleans.Streams.IAsyncStream`1.IsRewindable
  isExternal: false
  name: IsRewindable
  nameWithType: IAsyncStream<T>.IsRewindable
  fullName: Orleans.Streams.IAsyncStream<T>.IsRewindable
  nameWithType.vb: IAsyncStream(Of T).IsRewindable
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).IsRewindable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Streams.IAsyncStream`1.ProviderName*
  commentId: Overload:Orleans.Streams.IAsyncStream`1.ProviderName
  isExternal: false
  name: ProviderName
  nameWithType: IAsyncStream<T>.ProviderName
  fullName: Orleans.Streams.IAsyncStream<T>.ProviderName
  nameWithType.vb: IAsyncStream(Of T).ProviderName
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).ProviderName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles*
  commentId: Overload:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles
  isExternal: false
  name: GetAllSubscriptionHandles
  nameWithType: IAsyncStream<T>.GetAllSubscriptionHandles
  fullName: Orleans.Streams.IAsyncStream<T>.GetAllSubscriptionHandles
  nameWithType.vb: IAsyncStream(Of T).GetAllSubscriptionHandles
  fullName.vb: Orleans.Streams.IAsyncStream(Of T).GetAllSubscriptionHandles
- uid: Task{IList{Orleans.Streams.StreamSubscriptionHandle{{T}}}}
  commentId: '!:Task{IList{Orleans.Streams.StreamSubscriptionHandle{`0}}}'
  definition: Task`1
  name: Task<IList<StreamSubscriptionHandle<T>>>
  nameWithType: Task<IList<StreamSubscriptionHandle<T>>>
  fullName: Task<IList<Orleans.Streams.StreamSubscriptionHandle<T>>>
  nameWithType.vb: Task(Of IList(Of StreamSubscriptionHandle(Of T)))
  fullName.vb: Task(Of IList(Of Orleans.Streams.StreamSubscriptionHandle(Of T)))
  name.vb: Task(Of IList(Of StreamSubscriptionHandle(Of T)))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Streams.StreamSubscriptionHandle`1
    name: StreamSubscriptionHandle
    nameWithType: StreamSubscriptionHandle
    fullName: Orleans.Streams.StreamSubscriptionHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Streams.StreamSubscriptionHandle`1
    name: StreamSubscriptionHandle
    nameWithType: StreamSubscriptionHandle
    fullName: Orleans.Streams.StreamSubscriptionHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
