### YamlMime:ManagedReference
items:
- uid: Orleans.Storage.AdoNetGrainStorage
  commentId: T:Orleans.Storage.AdoNetGrainStorage
  id: AdoNetGrainStorage
  parent: Orleans.Storage
  children:
  - Orleans.Storage.AdoNetGrainStorage.#ctor(ILogger{Orleans.Storage.AdoNetGrainStorage},IProviderRuntime,IOptions{Orleans.Configuration.AdoNetGrainStorageOptions},IOptions{ClusterOptions},System.String)
  - Orleans.Storage.AdoNetGrainStorage.BinaryFormatSerializerTag
  - Orleans.Storage.AdoNetGrainStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  - Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
  - Orleans.Storage.AdoNetGrainStorage.DefaultInitializationQuery
  - Orleans.Storage.AdoNetGrainStorage.HashPicker
  - Orleans.Storage.AdoNetGrainStorage.JsonFormatSerializerTag
  - Orleans.Storage.AdoNetGrainStorage.Participate(ISiloLifecycle)
  - Orleans.Storage.AdoNetGrainStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  - Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
  - Orleans.Storage.AdoNetGrainStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  - Orleans.Storage.AdoNetGrainStorage.XmlFormatSerializerTag
  langs:
  - csharp
  - vb
  name: AdoNetGrainStorage
  nameWithType: AdoNetGrainStorage
  fullName: Orleans.Storage.AdoNetGrainStorage
  type: Class
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: AdoNetGrainStorage
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 69
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nA storage provider for writing grain state data to relational storage.\n"
  remarks: "\n<p>\nRequired configuration params: <code>DataConnectionString</code>\n</p>\n<p>\nOptional configuration params:\n<code>AdoInvariant</code> -- defaults to <code>System.Data.SqlClient</code>\n<code>UseJsonFormat</code> -- defaults to <code>false</code>\n<code>UseXmlFormat</code> -- defaults to <code>false</code>\n<code>UseBinaryFormat</code> -- defaults to <code>true</code>\n</p>\n"
  example: []
  syntax:
    content: 'public class AdoNetGrainStorage : IGrainStorage, ILifecycleParticipant<ISiloLifecycle>'
    content.vb: >-
      Public Class AdoNetGrainStorage

          Inherits IGrainStorage

          Implements ILifecycleParticipant(Of ISiloLifecycle)
  inheritance:
  - System.Object
  implements:
  - Orleans.ILifecycleParticipant{ISiloLifecycle}
  extensionMethods:
  - Orleans.Storage.AdoNetGrainStorage.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Orleans.Storage.AdoNetGrainStorage.BinaryFormatSerializerTag
  commentId: F:Orleans.Storage.AdoNetGrainStorage.BinaryFormatSerializerTag
  id: BinaryFormatSerializerTag
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: BinaryFormatSerializerTag
  nameWithType: AdoNetGrainStorage.BinaryFormatSerializerTag
  fullName: Orleans.Storage.AdoNetGrainStorage.BinaryFormatSerializerTag
  type: Field
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: BinaryFormatSerializerTag
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 77
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nTag for BinaryFormatSerializer\n"
  example: []
  syntax:
    content: public const string BinaryFormatSerializerTag = null
    return:
      type: System.String
    content.vb: Public Const BinaryFormatSerializerTag As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Orleans.Storage.AdoNetGrainStorage.JsonFormatSerializerTag
  commentId: F:Orleans.Storage.AdoNetGrainStorage.JsonFormatSerializerTag
  id: JsonFormatSerializerTag
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: JsonFormatSerializerTag
  nameWithType: AdoNetGrainStorage.JsonFormatSerializerTag
  fullName: Orleans.Storage.AdoNetGrainStorage.JsonFormatSerializerTag
  type: Field
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: JsonFormatSerializerTag
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 81
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nTag for JsonFormatSerializer\n"
  example: []
  syntax:
    content: public const string JsonFormatSerializerTag = null
    return:
      type: System.String
    content.vb: Public Const JsonFormatSerializerTag As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Orleans.Storage.AdoNetGrainStorage.XmlFormatSerializerTag
  commentId: F:Orleans.Storage.AdoNetGrainStorage.XmlFormatSerializerTag
  id: XmlFormatSerializerTag
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: XmlFormatSerializerTag
  nameWithType: AdoNetGrainStorage.XmlFormatSerializerTag
  fullName: Orleans.Storage.AdoNetGrainStorage.XmlFormatSerializerTag
  type: Field
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: XmlFormatSerializerTag
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 85
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nTag for XmlFormatSerializer\n"
  example: []
  syntax:
    content: public const string XmlFormatSerializerTag = null
    return:
      type: System.String
    content.vb: Public Const XmlFormatSerializerTag As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Orleans.Storage.AdoNetGrainStorage.DefaultInitializationQuery
  commentId: F:Orleans.Storage.AdoNetGrainStorage.DefaultInitializationQuery
  id: DefaultInitializationQuery
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: DefaultInitializationQuery
  nameWithType: AdoNetGrainStorage.DefaultInitializationQuery
  fullName: Orleans.Storage.AdoNetGrainStorage.DefaultInitializationQuery
  type: Field
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: DefaultInitializationQuery
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 108
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nThe default query to initialize this structure from the Orleans database.\n"
  example: []
  syntax:
    content: public const string DefaultInitializationQuery = null
    return:
      type: System.String
    content.vb: Public Const DefaultInitializationQuery As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
  commentId: P:Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
  id: CurrentOperationalQueries
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: CurrentOperationalQueries
  nameWithType: AdoNetGrainStorage.CurrentOperationalQueries
  fullName: Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
  type: Property
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: CurrentOperationalQueries
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 113
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nThe queries currently used. When this is updated, the new queries will take effect immediately.\n"
  example: []
  syntax:
    content: public RelationalStorageProviderQueries CurrentOperationalQueries { get; set; }
    parameters: []
    return:
      type: Orleans.Storage.RelationalStorageProviderQueries
    content.vb: Public Property CurrentOperationalQueries As RelationalStorageProviderQueries
  overload: Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
  commentId: P:Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
  id: StorageSerializationPicker
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: StorageSerializationPicker
  nameWithType: AdoNetGrainStorage.StorageSerializationPicker
  fullName: Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
  type: Property
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: StorageSerializationPicker
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 122
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nA strategy to pick a serializer or a deserializer for storage operations. This can be used to:\n1) Add a custom serializer or deserializer for use in storage provider operations.\n2) In combination with serializer or deserializer to update stored object version.\n3) Per-grain storage format selection\n4) Switch storage format first by reading using the save format and then writing in the new format.\n"
  example: []
  syntax:
    content: public IStorageSerializationPicker StorageSerializationPicker { get; set; }
    parameters: []
    return:
      type: Orleans.Storage.IStorageSerializationPicker
    content.vb: Public Property StorageSerializationPicker As IStorageSerializationPicker
  overload: Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.HashPicker
  commentId: P:Orleans.Storage.AdoNetGrainStorage.HashPicker
  id: HashPicker
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: HashPicker
  nameWithType: AdoNetGrainStorage.HashPicker
  fullName: Orleans.Storage.AdoNetGrainStorage.HashPicker
  type: Property
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: HashPicker
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 127
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: "\nThe hash generator used to hash natural keys, grain ID and grain type to a more narrow index.\n"
  example: []
  syntax:
    content: public IStorageHasherPicker HashPicker { get; set; }
    parameters: []
    return:
      type: Orleans.Storage.IStorageHasherPicker
    content.vb: Public Property HashPicker As IStorageHasherPicker
  overload: Orleans.Storage.AdoNetGrainStorage.HashPicker*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.#ctor(ILogger{Orleans.Storage.AdoNetGrainStorage},IProviderRuntime,IOptions{Orleans.Configuration.AdoNetGrainStorageOptions},IOptions{ClusterOptions},System.String)
  commentId: M:Orleans.Storage.AdoNetGrainStorage.#ctor(ILogger{Orleans.Storage.AdoNetGrainStorage},IProviderRuntime,IOptions{Orleans.Configuration.AdoNetGrainStorageOptions},IOptions{ClusterOptions},System.String)
  id: '#ctor(ILogger{Orleans.Storage.AdoNetGrainStorage},IProviderRuntime,IOptions{Orleans.Configuration.AdoNetGrainStorageOptions},IOptions{ClusterOptions},System.String)'
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: AdoNetGrainStorage(ILogger<AdoNetGrainStorage>, IProviderRuntime, IOptions<AdoNetGrainStorageOptions>, IOptions<ClusterOptions>, String)
  nameWithType: AdoNetGrainStorage.AdoNetGrainStorage(ILogger<AdoNetGrainStorage>, IProviderRuntime, IOptions<AdoNetGrainStorageOptions>, IOptions<ClusterOptions>, String)
  fullName: Orleans.Storage.AdoNetGrainStorage.AdoNetGrainStorage(ILogger<Orleans.Storage.AdoNetGrainStorage>, IProviderRuntime, IOptions<Orleans.Configuration.AdoNetGrainStorageOptions>, IOptions<ClusterOptions>, System.String)
  type: Constructor
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: .ctor
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 133
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  syntax:
    content: public AdoNetGrainStorage(ILogger<AdoNetGrainStorage> logger, IProviderRuntime providerRuntime, IOptions<AdoNetGrainStorageOptions> options, IOptions<ClusterOptions> clusterOptions, string name)
    parameters:
    - id: logger
      type: ILogger{Orleans.Storage.AdoNetGrainStorage}
    - id: providerRuntime
      type: IProviderRuntime
    - id: options
      type: IOptions{Orleans.Configuration.AdoNetGrainStorageOptions}
    - id: clusterOptions
      type: IOptions{ClusterOptions}
    - id: name
      type: System.String
    content.vb: Public Sub New(logger As ILogger(Of AdoNetGrainStorage), providerRuntime As IProviderRuntime, options As IOptions(Of AdoNetGrainStorageOptions), clusterOptions As IOptions(Of ClusterOptions), name As String)
  overload: Orleans.Storage.AdoNetGrainStorage.#ctor*
  nameWithType.vb: AdoNetGrainStorage.AdoNetGrainStorage(ILogger(Of AdoNetGrainStorage), IProviderRuntime, IOptions(Of AdoNetGrainStorageOptions), IOptions(Of ClusterOptions), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Orleans.Storage.AdoNetGrainStorage.AdoNetGrainStorage(ILogger(Of Orleans.Storage.AdoNetGrainStorage), IProviderRuntime, IOptions(Of Orleans.Configuration.AdoNetGrainStorageOptions), IOptions(Of ClusterOptions), System.String)
  name.vb: AdoNetGrainStorage(ILogger(Of AdoNetGrainStorage), IProviderRuntime, IOptions(Of AdoNetGrainStorageOptions), IOptions(Of ClusterOptions), String)
- uid: Orleans.Storage.AdoNetGrainStorage.Participate(ISiloLifecycle)
  commentId: M:Orleans.Storage.AdoNetGrainStorage.Participate(ISiloLifecycle)
  id: Participate(ISiloLifecycle)
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: Participate(ISiloLifecycle)
  nameWithType: AdoNetGrainStorage.Participate(ISiloLifecycle)
  fullName: Orleans.Storage.AdoNetGrainStorage.Participate(ISiloLifecycle)
  type: Method
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Participate
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 147
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  syntax:
    content: public void Participate(ISiloLifecycle lifecycle)
    parameters:
    - id: lifecycle
      type: ISiloLifecycle
    content.vb: Public Sub Participate(lifecycle As ISiloLifecycle)
  overload: Orleans.Storage.AdoNetGrainStorage.Participate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  commentId: M:Orleans.Storage.AdoNetGrainStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  id: ClearStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: ClearStateAsync(String, GrainReference, IGrainState)
  nameWithType: AdoNetGrainStorage.ClearStateAsync(String, GrainReference, IGrainState)
  fullName: Orleans.Storage.AdoNetGrainStorage.ClearStateAsync(System.String, Orleans.Runtime.GrainReference, IGrainState)
  type: Method
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ClearStateAsync
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 153
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: Clear state data function for this storage provider.
  example: []
  syntax:
    content: public Task ClearStateAsync(string grainType, GrainReference grainReference, IGrainState grainState)
    parameters:
    - id: grainType
      type: System.String
    - id: grainReference
      type: Orleans.Runtime.GrainReference
    - id: grainState
      type: IGrainState
    return:
      type: Task
    content.vb: Public Function ClearStateAsync(grainType As String, grainReference As GrainReference, grainState As IGrainState) As Task
  overload: Orleans.Storage.AdoNetGrainStorage.ClearStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  commentId: M:Orleans.Storage.AdoNetGrainStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  id: ReadStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: ReadStateAsync(String, GrainReference, IGrainState)
  nameWithType: AdoNetGrainStorage.ReadStateAsync(String, GrainReference, IGrainState)
  fullName: Orleans.Storage.AdoNetGrainStorage.ReadStateAsync(System.String, Orleans.Runtime.GrainReference, IGrainState)
  type: Method
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: ReadStateAsync
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 206
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: Read state data function for this storage provider.
  example: []
  syntax:
    content: public Task ReadStateAsync(string grainType, GrainReference grainReference, IGrainState grainState)
    parameters:
    - id: grainType
      type: System.String
    - id: grainReference
      type: Orleans.Runtime.GrainReference
    - id: grainState
      type: IGrainState
    return:
      type: Task
    content.vb: Public Function ReadStateAsync(grainType As String, grainReference As GrainReference, grainState As IGrainState) As Task
  overload: Orleans.Storage.AdoNetGrainStorage.ReadStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Orleans.Storage.AdoNetGrainStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  commentId: M:Orleans.Storage.AdoNetGrainStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  id: WriteStateAsync(System.String,Orleans.Runtime.GrainReference,IGrainState)
  parent: Orleans.Storage.AdoNetGrainStorage
  langs:
  - csharp
  - vb
  name: WriteStateAsync(String, GrainReference, IGrainState)
  nameWithType: AdoNetGrainStorage.WriteStateAsync(String, GrainReference, IGrainState)
  fullName: Orleans.Storage.AdoNetGrainStorage.WriteStateAsync(System.String, Orleans.Runtime.GrainReference, IGrainState)
  type: Method
  source:
    remote:
      path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: WriteStateAsync
    path: src/AdoNet/Orleans.Persistence.AdoNet/Storage/Provider/AdoNetGrainStorage.cs
    startLine: 331
  assemblies:
  - Orleans.Persistence.AdoNet
  namespace: Orleans.Storage
  summary: Write state data function for this storage provider.
  example: []
  syntax:
    content: public Task WriteStateAsync(string grainType, GrainReference grainReference, IGrainState grainState)
    parameters:
    - id: grainType
      type: System.String
    - id: grainReference
      type: Orleans.Runtime.GrainReference
    - id: grainState
      type: IGrainState
    return:
      type: Task
    content.vb: Public Function WriteStateAsync(grainType As String, grainReference As GrainReference, grainState As IGrainState) As Task
  overload: Orleans.Storage.AdoNetGrainStorage.WriteStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Orleans.Storage
  commentId: N:Orleans.Storage
  isExternal: false
  name: Orleans.Storage
  nameWithType: Orleans.Storage
  fullName: Orleans.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Orleans.ILifecycleParticipant{ISiloLifecycle}
  commentId: T:Orleans.ILifecycleParticipant{ISiloLifecycle}
  parent: Orleans
  definition: Orleans.ILifecycleParticipant`1
  name: ILifecycleParticipant<ISiloLifecycle>
  nameWithType: ILifecycleParticipant<ISiloLifecycle>
  fullName: Orleans.ILifecycleParticipant<ISiloLifecycle>
  nameWithType.vb: ILifecycleParticipant(Of ISiloLifecycle)
  fullName.vb: Orleans.ILifecycleParticipant(Of ISiloLifecycle)
  name.vb: ILifecycleParticipant(Of ISiloLifecycle)
  spec.csharp:
  - uid: Orleans.ILifecycleParticipant`1
    name: ILifecycleParticipant
    nameWithType: ILifecycleParticipant
    fullName: Orleans.ILifecycleParticipant
  - name: <
    nameWithType: <
    fullName: <
  - uid: ISiloLifecycle
    name: ISiloLifecycle
    nameWithType: ISiloLifecycle
    fullName: ISiloLifecycle
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.ILifecycleParticipant`1
    name: ILifecycleParticipant
    nameWithType: ILifecycleParticipant
    fullName: Orleans.ILifecycleParticipant
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ISiloLifecycle
    name: ISiloLifecycle
    nameWithType: ISiloLifecycle
    fullName: ISiloLifecycle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Storage.AdoNetGrainStorage.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<AdoNetGrainStorage>()
  nameWithType: ImmutableExt.AsImmutable<AdoNetGrainStorage>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Storage.AdoNetGrainStorage>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of AdoNetGrainStorage)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Storage.AdoNetGrainStorage)()
  name.vb: AsImmutable(Of AdoNetGrainStorage)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<AdoNetGrainStorage>
    nameWithType: ImmutableExt.AsImmutable<AdoNetGrainStorage>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Storage.AdoNetGrainStorage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of AdoNetGrainStorage)
    nameWithType: ImmutableExt.AsImmutable(Of AdoNetGrainStorage)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Storage.AdoNetGrainStorage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.ILifecycleParticipant`1
  commentId: T:Orleans.ILifecycleParticipant`1
  isExternal: false
  name: ILifecycleParticipant<TLifecycleObservable>
  nameWithType: ILifecycleParticipant<TLifecycleObservable>
  fullName: Orleans.ILifecycleParticipant<TLifecycleObservable>
  nameWithType.vb: ILifecycleParticipant(Of TLifecycleObservable)
  fullName.vb: Orleans.ILifecycleParticipant(Of TLifecycleObservable)
  name.vb: ILifecycleParticipant(Of TLifecycleObservable)
  spec.csharp:
  - uid: Orleans.ILifecycleParticipant`1
    name: ILifecycleParticipant
    nameWithType: ILifecycleParticipant
    fullName: Orleans.ILifecycleParticipant
  - name: <
    nameWithType: <
    fullName: <
  - name: TLifecycleObservable
    nameWithType: TLifecycleObservable
    fullName: TLifecycleObservable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Orleans.ILifecycleParticipant`1
    name: ILifecycleParticipant
    nameWithType: ILifecycleParticipant
    fullName: Orleans.ILifecycleParticipant
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLifecycleObservable
    nameWithType: TLifecycleObservable
    fullName: TLifecycleObservable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans
  commentId: N:Orleans
  isExternal: false
  name: Orleans
  nameWithType: Orleans
  fullName: Orleans
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
  isExternal: false
  name: CurrentOperationalQueries
  nameWithType: AdoNetGrainStorage.CurrentOperationalQueries
  fullName: Orleans.Storage.AdoNetGrainStorage.CurrentOperationalQueries
- uid: Orleans.Storage.RelationalStorageProviderQueries
  commentId: T:Orleans.Storage.RelationalStorageProviderQueries
  parent: Orleans.Storage
  isExternal: false
  name: RelationalStorageProviderQueries
  nameWithType: RelationalStorageProviderQueries
  fullName: Orleans.Storage.RelationalStorageProviderQueries
- uid: Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
  isExternal: false
  name: StorageSerializationPicker
  nameWithType: AdoNetGrainStorage.StorageSerializationPicker
  fullName: Orleans.Storage.AdoNetGrainStorage.StorageSerializationPicker
- uid: Orleans.Storage.IStorageSerializationPicker
  commentId: T:Orleans.Storage.IStorageSerializationPicker
  parent: Orleans.Storage
  isExternal: false
  name: IStorageSerializationPicker
  nameWithType: IStorageSerializationPicker
  fullName: Orleans.Storage.IStorageSerializationPicker
- uid: Orleans.Storage.AdoNetGrainStorage.HashPicker*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.HashPicker
  isExternal: false
  name: HashPicker
  nameWithType: AdoNetGrainStorage.HashPicker
  fullName: Orleans.Storage.AdoNetGrainStorage.HashPicker
- uid: Orleans.Storage.IStorageHasherPicker
  commentId: T:Orleans.Storage.IStorageHasherPicker
  parent: Orleans.Storage
  isExternal: false
  name: IStorageHasherPicker
  nameWithType: IStorageHasherPicker
  fullName: Orleans.Storage.IStorageHasherPicker
- uid: Orleans.Storage.AdoNetGrainStorage.#ctor*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.#ctor
  isExternal: false
  name: AdoNetGrainStorage
  nameWithType: AdoNetGrainStorage.AdoNetGrainStorage
  fullName: Orleans.Storage.AdoNetGrainStorage.AdoNetGrainStorage
- uid: ILogger{Orleans.Storage.AdoNetGrainStorage}
  commentId: '!:ILogger{Orleans.Storage.AdoNetGrainStorage}'
  definition: ILogger`1
  name: ILogger<AdoNetGrainStorage>
  nameWithType: ILogger<AdoNetGrainStorage>
  fullName: ILogger<Orleans.Storage.AdoNetGrainStorage>
  nameWithType.vb: ILogger(Of AdoNetGrainStorage)
  fullName.vb: ILogger(Of Orleans.Storage.AdoNetGrainStorage)
  name.vb: ILogger(Of AdoNetGrainStorage)
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Storage.AdoNetGrainStorage
    name: AdoNetGrainStorage
    nameWithType: AdoNetGrainStorage
    fullName: Orleans.Storage.AdoNetGrainStorage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Storage.AdoNetGrainStorage
    name: AdoNetGrainStorage
    nameWithType: AdoNetGrainStorage
    fullName: Orleans.Storage.AdoNetGrainStorage
  - name: )
    nameWithType: )
    fullName: )
- uid: IProviderRuntime
  isExternal: true
  name: IProviderRuntime
  nameWithType: IProviderRuntime
  fullName: IProviderRuntime
- uid: IOptions{Orleans.Configuration.AdoNetGrainStorageOptions}
  commentId: '!:IOptions{Orleans.Configuration.AdoNetGrainStorageOptions}'
  definition: IOptions`1
  name: IOptions<AdoNetGrainStorageOptions>
  nameWithType: IOptions<AdoNetGrainStorageOptions>
  fullName: IOptions<Orleans.Configuration.AdoNetGrainStorageOptions>
  nameWithType.vb: IOptions(Of AdoNetGrainStorageOptions)
  fullName.vb: IOptions(Of Orleans.Configuration.AdoNetGrainStorageOptions)
  name.vb: IOptions(Of AdoNetGrainStorageOptions)
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Configuration.AdoNetGrainStorageOptions
    name: AdoNetGrainStorageOptions
    nameWithType: AdoNetGrainStorageOptions
    fullName: Orleans.Configuration.AdoNetGrainStorageOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Configuration.AdoNetGrainStorageOptions
    name: AdoNetGrainStorageOptions
    nameWithType: AdoNetGrainStorageOptions
    fullName: Orleans.Configuration.AdoNetGrainStorageOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: IOptions{ClusterOptions}
  commentId: '!:IOptions{ClusterOptions}'
  definition: IOptions`1
  name: IOptions<ClusterOptions>
  nameWithType: IOptions<ClusterOptions>
  fullName: IOptions<ClusterOptions>
  nameWithType.vb: IOptions(Of ClusterOptions)
  fullName.vb: IOptions(Of ClusterOptions)
  name.vb: IOptions(Of ClusterOptions)
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ClusterOptions
    name: ClusterOptions
    nameWithType: ClusterOptions
    fullName: ClusterOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ClusterOptions
    name: ClusterOptions
    nameWithType: ClusterOptions
    fullName: ClusterOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IOptions`1
  isExternal: true
  name: IOptions<>
  nameWithType: IOptions<>
  fullName: IOptions<>
  nameWithType.vb: IOptions(Of )
  fullName.vb: IOptions(Of )
  name.vb: IOptions(Of )
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Storage.AdoNetGrainStorage.Participate*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.Participate
  isExternal: false
  name: Participate
  nameWithType: AdoNetGrainStorage.Participate
  fullName: Orleans.Storage.AdoNetGrainStorage.Participate
- uid: ISiloLifecycle
  isExternal: true
  name: ISiloLifecycle
  nameWithType: ISiloLifecycle
  fullName: ISiloLifecycle
- uid: Orleans.Storage.AdoNetGrainStorage.ClearStateAsync*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.ClearStateAsync
  isExternal: false
  name: ClearStateAsync
  nameWithType: AdoNetGrainStorage.ClearStateAsync
  fullName: Orleans.Storage.AdoNetGrainStorage.ClearStateAsync
- uid: Orleans.Runtime.GrainReference
  commentId: T:Orleans.Runtime.GrainReference
  parent: Orleans.Runtime
  isExternal: false
  name: GrainReference
  nameWithType: GrainReference
  fullName: Orleans.Runtime.GrainReference
- uid: IGrainState
  isExternal: true
  name: IGrainState
  nameWithType: IGrainState
  fullName: IGrainState
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Orleans.Runtime
  commentId: N:Orleans.Runtime
  isExternal: false
  name: Orleans.Runtime
  nameWithType: Orleans.Runtime
  fullName: Orleans.Runtime
- uid: Orleans.Storage.AdoNetGrainStorage.ReadStateAsync*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.ReadStateAsync
  isExternal: false
  name: ReadStateAsync
  nameWithType: AdoNetGrainStorage.ReadStateAsync
  fullName: Orleans.Storage.AdoNetGrainStorage.ReadStateAsync
- uid: Orleans.Storage.AdoNetGrainStorage.WriteStateAsync*
  commentId: Overload:Orleans.Storage.AdoNetGrainStorage.WriteStateAsync
  isExternal: false
  name: WriteStateAsync
  nameWithType: AdoNetGrainStorage.WriteStateAsync
  fullName: Orleans.Storage.AdoNetGrainStorage.WriteStateAsync
