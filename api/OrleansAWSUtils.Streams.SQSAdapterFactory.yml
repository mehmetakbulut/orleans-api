### YamlMime:ManagedReference
items:
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory
  commentId: T:OrleansAWSUtils.Streams.SQSAdapterFactory
  id: SQSAdapterFactory
  parent: OrleansAWSUtils.Streams
  children:
  - OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor(System.String,Orleans.Configuration.SqsOptions,HashRingStreamQueueMapperOptions,SimpleQueueCacheOptions,IServiceProvider,IOptions{ClusterOptions},SerializationManager,ILoggerFactory)
  - OrleansAWSUtils.Streams.SQSAdapterFactory.Create(IServiceProvider,System.String)
  - OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter
  - OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler(QueueId)
  - OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache
  - OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper
  - OrleansAWSUtils.Streams.SQSAdapterFactory.Init
  - OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
  langs:
  - csharp
  - vb
  name: SQSAdapterFactory
  nameWithType: SQSAdapterFactory
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory
  type: Class
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: SQSAdapterFactory
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 14
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: Factory class for Azure Queue based stream provider.
  example: []
  syntax:
    content: 'public class SQSAdapterFactory : IQueueAdapterFactory'
    content.vb: >-
      Public Class SQSAdapterFactory

          Inherits IQueueAdapterFactory
  inheritance:
  - System.Object
  extensionMethods:
  - OrleansAWSUtils.Streams.SQSAdapterFactory.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
  commentId: P:OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
  id: StreamFailureHandlerFactory
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: StreamFailureHandlerFactory
  nameWithType: SQSAdapterFactory.StreamFailureHandlerFactory
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
  type: Property
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: StreamFailureHandlerFactory
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 27
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: "\nApplication level failure handler override.\n"
  example: []
  syntax:
    content: protected Func<QueueId, Task<IStreamFailureHandler>> StreamFailureHandlerFactory { set; }
    parameters: []
    return:
      type: Func{QueueId,Task{IStreamFailureHandler}}
    content.vb: Protected WriteOnly Property StreamFailureHandlerFactory As Func(Of QueueId, Task(Of IStreamFailureHandler))
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory*
  modifiers.csharp:
  - protected
  - set
  modifiers.vb:
  - Protected
  - WriteOnly
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor(System.String,Orleans.Configuration.SqsOptions,HashRingStreamQueueMapperOptions,SimpleQueueCacheOptions,IServiceProvider,IOptions{ClusterOptions},SerializationManager,ILoggerFactory)
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor(System.String,Orleans.Configuration.SqsOptions,HashRingStreamQueueMapperOptions,SimpleQueueCacheOptions,IServiceProvider,IOptions{ClusterOptions},SerializationManager,ILoggerFactory)
  id: '#ctor(System.String,Orleans.Configuration.SqsOptions,HashRingStreamQueueMapperOptions,SimpleQueueCacheOptions,IServiceProvider,IOptions{ClusterOptions},SerializationManager,ILoggerFactory)'
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: SQSAdapterFactory(String, SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions<ClusterOptions>, SerializationManager, ILoggerFactory)
  nameWithType: SQSAdapterFactory.SQSAdapterFactory(String, SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions<ClusterOptions>, SerializationManager, ILoggerFactory)
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.SQSAdapterFactory(System.String, Orleans.Configuration.SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions<ClusterOptions>, SerializationManager, ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: .ctor
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 29
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  syntax:
    content: public SQSAdapterFactory(string name, SqsOptions sqsOptions, HashRingStreamQueueMapperOptions queueMapperOptions, SimpleQueueCacheOptions cacheOptions, IServiceProvider serviceProvider, IOptions<ClusterOptions> clusterOptions, SerializationManager serializationManager, ILoggerFactory loggerFactory)
    parameters:
    - id: name
      type: System.String
    - id: sqsOptions
      type: Orleans.Configuration.SqsOptions
    - id: queueMapperOptions
      type: HashRingStreamQueueMapperOptions
    - id: cacheOptions
      type: SimpleQueueCacheOptions
    - id: serviceProvider
      type: IServiceProvider
    - id: clusterOptions
      type: IOptions{ClusterOptions}
    - id: serializationManager
      type: SerializationManager
    - id: loggerFactory
      type: ILoggerFactory
    content.vb: Public Sub New(name As String, sqsOptions As SqsOptions, queueMapperOptions As HashRingStreamQueueMapperOptions, cacheOptions As SimpleQueueCacheOptions, serviceProvider As IServiceProvider, clusterOptions As IOptions(Of ClusterOptions), serializationManager As SerializationManager, loggerFactory As ILoggerFactory)
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor*
  nameWithType.vb: SQSAdapterFactory.SQSAdapterFactory(String, SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions(Of ClusterOptions), SerializationManager, ILoggerFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OrleansAWSUtils.Streams.SQSAdapterFactory.SQSAdapterFactory(System.String, Orleans.Configuration.SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions(Of ClusterOptions), SerializationManager, ILoggerFactory)
  name.vb: SQSAdapterFactory(String, SqsOptions, HashRingStreamQueueMapperOptions, SimpleQueueCacheOptions, IServiceProvider, IOptions(Of ClusterOptions), SerializationManager, ILoggerFactory)
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.Init
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.Init
  id: Init
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: SQSAdapterFactory.Init()
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.Init()
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Init
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 50
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: Init the factory.
  example: []
  syntax:
    content: public virtual void Init()
    content.vb: Public Overridable Sub Init
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.Init*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter
  id: CreateAdapter
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: CreateAdapter()
  nameWithType: SQSAdapterFactory.CreateAdapter()
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter()
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: CreateAdapter
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 60
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: Creates the Azure Queue based adapter.
  example: []
  syntax:
    content: public virtual Task<IQueueAdapter> CreateAdapter()
    return:
      type: Task{IQueueAdapter}
    content.vb: Public Overridable Function CreateAdapter As Task(Of IQueueAdapter)
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache
  id: GetQueueAdapterCache
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: GetQueueAdapterCache()
  nameWithType: SQSAdapterFactory.GetQueueAdapterCache()
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache()
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetQueueAdapterCache
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 67
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: Creates the adapter cache.
  example: []
  syntax:
    content: public virtual IQueueAdapterCache GetQueueAdapterCache()
    return:
      type: IQueueAdapterCache
    content.vb: Public Overridable Function GetQueueAdapterCache As IQueueAdapterCache
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper
  id: GetStreamQueueMapper
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: GetStreamQueueMapper()
  nameWithType: SQSAdapterFactory.GetStreamQueueMapper()
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper()
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetStreamQueueMapper
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 73
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: Creates the factory stream queue mapper.
  example: []
  syntax:
    content: public IStreamQueueMapper GetStreamQueueMapper()
    return:
      type: IStreamQueueMapper
    content.vb: Public Function GetStreamQueueMapper As IStreamQueueMapper
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler(QueueId)
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler(QueueId)
  id: GetDeliveryFailureHandler(QueueId)
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: GetDeliveryFailureHandler(QueueId)
  nameWithType: SQSAdapterFactory.GetDeliveryFailureHandler(QueueId)
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler(QueueId)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetDeliveryFailureHandler
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 83
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  summary: "\nCreates a delivery failure handler for the specified queue.\n"
  example: []
  syntax:
    content: public Task<IStreamFailureHandler> GetDeliveryFailureHandler(QueueId queueId)
    parameters:
    - id: queueId
      type: QueueId
      description: ''
    return:
      type: Task{IStreamFailureHandler}
      description: ''
    content.vb: Public Function GetDeliveryFailureHandler(queueId As QueueId) As Task(Of IStreamFailureHandler)
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.Create(IServiceProvider,System.String)
  commentId: M:OrleansAWSUtils.Streams.SQSAdapterFactory.Create(IServiceProvider,System.String)
  id: Create(IServiceProvider,System.String)
  parent: OrleansAWSUtils.Streams.SQSAdapterFactory
  langs:
  - csharp
  - vb
  name: Create(IServiceProvider, String)
  nameWithType: SQSAdapterFactory.Create(IServiceProvider, String)
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.Create(IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Create
    path: src/AWS/Orleans.Streaming.SQS/Streams/SQSAdapterFactory.cs
    startLine: 88
  assemblies:
  - Orleans.Streaming.SQS
  namespace: OrleansAWSUtils.Streams
  syntax:
    content: public static SQSAdapterFactory Create(IServiceProvider services, string name)
    parameters:
    - id: services
      type: IServiceProvider
    - id: name
      type: System.String
    return:
      type: OrleansAWSUtils.Streams.SQSAdapterFactory
    content.vb: Public Shared Function Create(services As IServiceProvider, name As String) As SQSAdapterFactory
  overload: OrleansAWSUtils.Streams.SQSAdapterFactory.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: OrleansAWSUtils.Streams
  commentId: N:OrleansAWSUtils.Streams
  isExternal: false
  name: OrleansAWSUtils.Streams
  nameWithType: OrleansAWSUtils.Streams
  fullName: OrleansAWSUtils.Streams
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<SQSAdapterFactory>()
  nameWithType: ImmutableExt.AsImmutable<SQSAdapterFactory>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<OrleansAWSUtils.Streams.SQSAdapterFactory>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of SQSAdapterFactory)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of OrleansAWSUtils.Streams.SQSAdapterFactory)()
  name.vb: AsImmutable(Of SQSAdapterFactory)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<SQSAdapterFactory>
    nameWithType: ImmutableExt.AsImmutable<SQSAdapterFactory>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<OrleansAWSUtils.Streams.SQSAdapterFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of SQSAdapterFactory)
    nameWithType: ImmutableExt.AsImmutable(Of SQSAdapterFactory)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of OrleansAWSUtils.Streams.SQSAdapterFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
  isExternal: false
  name: StreamFailureHandlerFactory
  nameWithType: SQSAdapterFactory.StreamFailureHandlerFactory
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.StreamFailureHandlerFactory
- uid: Func{QueueId,Task{IStreamFailureHandler}}
  commentId: '!:Func{QueueId,Task{IStreamFailureHandler}}'
  definition: Func`2
  name: Func<QueueId, Task<IStreamFailureHandler>>
  nameWithType: Func<QueueId, Task<IStreamFailureHandler>>
  fullName: Func<QueueId, Task<IStreamFailureHandler>>
  nameWithType.vb: Func(Of QueueId, Task(Of IStreamFailureHandler))
  fullName.vb: Func(Of QueueId, Task(Of IStreamFailureHandler))
  name.vb: Func(Of QueueId, Task(Of IStreamFailureHandler))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: QueueId
    name: QueueId
    nameWithType: QueueId
    fullName: QueueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IStreamFailureHandler
    name: IStreamFailureHandler
    nameWithType: IStreamFailureHandler
    fullName: IStreamFailureHandler
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: QueueId
    name: QueueId
    nameWithType: QueueId
    fullName: QueueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IStreamFailureHandler
    name: IStreamFailureHandler
    nameWithType: IStreamFailureHandler
    fullName: IStreamFailureHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.#ctor
  isExternal: false
  name: SQSAdapterFactory
  nameWithType: SQSAdapterFactory.SQSAdapterFactory
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.SQSAdapterFactory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Orleans.Configuration.SqsOptions
  commentId: T:Orleans.Configuration.SqsOptions
  parent: Orleans.Configuration
  isExternal: false
  name: SqsOptions
  nameWithType: SqsOptions
  fullName: Orleans.Configuration.SqsOptions
- uid: HashRingStreamQueueMapperOptions
  isExternal: true
  name: HashRingStreamQueueMapperOptions
  nameWithType: HashRingStreamQueueMapperOptions
  fullName: HashRingStreamQueueMapperOptions
- uid: SimpleQueueCacheOptions
  isExternal: true
  name: SimpleQueueCacheOptions
  nameWithType: SimpleQueueCacheOptions
  fullName: SimpleQueueCacheOptions
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: IOptions{ClusterOptions}
  commentId: '!:IOptions{ClusterOptions}'
  definition: IOptions`1
  name: IOptions<ClusterOptions>
  nameWithType: IOptions<ClusterOptions>
  fullName: IOptions<ClusterOptions>
  nameWithType.vb: IOptions(Of ClusterOptions)
  fullName.vb: IOptions(Of ClusterOptions)
  name.vb: IOptions(Of ClusterOptions)
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ClusterOptions
    name: ClusterOptions
    nameWithType: ClusterOptions
    fullName: ClusterOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ClusterOptions
    name: ClusterOptions
    nameWithType: ClusterOptions
    fullName: ClusterOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SerializationManager
  isExternal: true
  name: SerializationManager
  nameWithType: SerializationManager
  fullName: SerializationManager
- uid: ILoggerFactory
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: ILoggerFactory
- uid: Orleans.Configuration
  commentId: N:Orleans.Configuration
  isExternal: false
  name: Orleans.Configuration
  nameWithType: Orleans.Configuration
  fullName: Orleans.Configuration
- uid: IOptions`1
  isExternal: true
  name: IOptions<>
  nameWithType: IOptions<>
  fullName: IOptions<>
  nameWithType.vb: IOptions(Of )
  fullName.vb: IOptions(Of )
  name.vb: IOptions(Of )
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.Init*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.Init
  isExternal: false
  name: Init
  nameWithType: SQSAdapterFactory.Init
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.Init
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter
  isExternal: false
  name: CreateAdapter
  nameWithType: SQSAdapterFactory.CreateAdapter
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.CreateAdapter
- uid: Task{IQueueAdapter}
  commentId: '!:Task{IQueueAdapter}'
  definition: Task`1
  name: Task<IQueueAdapter>
  nameWithType: Task<IQueueAdapter>
  fullName: Task<IQueueAdapter>
  nameWithType.vb: Task(Of IQueueAdapter)
  fullName.vb: Task(Of IQueueAdapter)
  name.vb: Task(Of IQueueAdapter)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IQueueAdapter
    name: IQueueAdapter
    nameWithType: IQueueAdapter
    fullName: IQueueAdapter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IQueueAdapter
    name: IQueueAdapter
    nameWithType: IQueueAdapter
    fullName: IQueueAdapter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache
  isExternal: false
  name: GetQueueAdapterCache
  nameWithType: SQSAdapterFactory.GetQueueAdapterCache
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetQueueAdapterCache
- uid: IQueueAdapterCache
  isExternal: true
  name: IQueueAdapterCache
  nameWithType: IQueueAdapterCache
  fullName: IQueueAdapterCache
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper
  isExternal: false
  name: GetStreamQueueMapper
  nameWithType: SQSAdapterFactory.GetStreamQueueMapper
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetStreamQueueMapper
- uid: IStreamQueueMapper
  isExternal: true
  name: IStreamQueueMapper
  nameWithType: IStreamQueueMapper
  fullName: IStreamQueueMapper
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler
  isExternal: false
  name: GetDeliveryFailureHandler
  nameWithType: SQSAdapterFactory.GetDeliveryFailureHandler
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.GetDeliveryFailureHandler
- uid: QueueId
  isExternal: true
  name: QueueId
  nameWithType: QueueId
  fullName: QueueId
- uid: Task{IStreamFailureHandler}
  commentId: '!:Task{IStreamFailureHandler}'
  definition: Task`1
  name: Task<IStreamFailureHandler>
  nameWithType: Task<IStreamFailureHandler>
  fullName: Task<IStreamFailureHandler>
  nameWithType.vb: Task(Of IStreamFailureHandler)
  fullName.vb: Task(Of IStreamFailureHandler)
  name.vb: Task(Of IStreamFailureHandler)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IStreamFailureHandler
    name: IStreamFailureHandler
    nameWithType: IStreamFailureHandler
    fullName: IStreamFailureHandler
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IStreamFailureHandler
    name: IStreamFailureHandler
    nameWithType: IStreamFailureHandler
    fullName: IStreamFailureHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory.Create*
  commentId: Overload:OrleansAWSUtils.Streams.SQSAdapterFactory.Create
  isExternal: false
  name: Create
  nameWithType: SQSAdapterFactory.Create
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory.Create
- uid: OrleansAWSUtils.Streams.SQSAdapterFactory
  commentId: T:OrleansAWSUtils.Streams.SQSAdapterFactory
  parent: OrleansAWSUtils.Streams
  isExternal: false
  name: SQSAdapterFactory
  nameWithType: SQSAdapterFactory
  fullName: OrleansAWSUtils.Streams.SQSAdapterFactory
