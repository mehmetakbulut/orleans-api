### YamlMime:ManagedReference
items:
- uid: Orleans.Versions.IVersionStore
  commentId: T:Orleans.Versions.IVersionStore
  id: IVersionStore
  parent: Orleans.Versions
  children:
  - Orleans.Versions.IVersionStore.GetCompatibilityStrategies
  - Orleans.Versions.IVersionStore.GetCompatibilityStrategy
  - Orleans.Versions.IVersionStore.GetSelectorStrategies
  - Orleans.Versions.IVersionStore.GetSelectorStrategy
  - Orleans.Versions.IVersionStore.IsEnabled
  langs:
  - csharp
  - vb
  name: IVersionStore
  nameWithType: IVersionStore
  fullName: Orleans.Versions.IVersionStore
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IVersionStore
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 7
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: 'public interface IVersionStore : IVersionManager'
    content.vb: >-
      Public Interface IVersionStore

          Inherits IVersionManager
  inheritedMembers:
  - Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
  - Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
  - Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)
  - Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)
  extensionMethods:
  - Orleans.Versions.IVersionStore.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Orleans.Versions.IVersionStore.IsEnabled
  commentId: P:Orleans.Versions.IVersionStore.IsEnabled
  id: IsEnabled
  parent: Orleans.Versions.IVersionStore
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: IVersionStore.IsEnabled
  fullName: Orleans.Versions.IVersionStore.IsEnabled
  type: Property
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IsEnabled
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 9
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: bool IsEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsEnabled As Boolean
  overload: Orleans.Versions.IVersionStore.IsEnabled*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Orleans.Versions.IVersionStore.GetCompatibilityStrategies
  commentId: M:Orleans.Versions.IVersionStore.GetCompatibilityStrategies
  id: GetCompatibilityStrategies
  parent: Orleans.Versions.IVersionStore
  langs:
  - csharp
  - vb
  name: GetCompatibilityStrategies()
  nameWithType: IVersionStore.GetCompatibilityStrategies()
  fullName: Orleans.Versions.IVersionStore.GetCompatibilityStrategies()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetCompatibilityStrategies
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 10
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: Task<Dictionary<int, CompatibilityStrategy>> GetCompatibilityStrategies()
    return:
      type: Task{Dictionary{System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy}}
    content.vb: Function GetCompatibilityStrategies As Task(Of Dictionary(Of Integer, CompatibilityStrategy))
  overload: Orleans.Versions.IVersionStore.GetCompatibilityStrategies*
- uid: Orleans.Versions.IVersionStore.GetSelectorStrategies
  commentId: M:Orleans.Versions.IVersionStore.GetSelectorStrategies
  id: GetSelectorStrategies
  parent: Orleans.Versions.IVersionStore
  langs:
  - csharp
  - vb
  name: GetSelectorStrategies()
  nameWithType: IVersionStore.GetSelectorStrategies()
  fullName: Orleans.Versions.IVersionStore.GetSelectorStrategies()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetSelectorStrategies
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 11
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: Task<Dictionary<int, VersionSelectorStrategy>> GetSelectorStrategies()
    return:
      type: Task{Dictionary{System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy}}
    content.vb: Function GetSelectorStrategies As Task(Of Dictionary(Of Integer, VersionSelectorStrategy))
  overload: Orleans.Versions.IVersionStore.GetSelectorStrategies*
- uid: Orleans.Versions.IVersionStore.GetCompatibilityStrategy
  commentId: M:Orleans.Versions.IVersionStore.GetCompatibilityStrategy
  id: GetCompatibilityStrategy
  parent: Orleans.Versions.IVersionStore
  langs:
  - csharp
  - vb
  name: GetCompatibilityStrategy()
  nameWithType: IVersionStore.GetCompatibilityStrategy()
  fullName: Orleans.Versions.IVersionStore.GetCompatibilityStrategy()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetCompatibilityStrategy
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 12
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: Task<CompatibilityStrategy> GetCompatibilityStrategy()
    return:
      type: Task{Orleans.Versions.Compatibility.CompatibilityStrategy}
    content.vb: Function GetCompatibilityStrategy As Task(Of CompatibilityStrategy)
  overload: Orleans.Versions.IVersionStore.GetCompatibilityStrategy*
- uid: Orleans.Versions.IVersionStore.GetSelectorStrategy
  commentId: M:Orleans.Versions.IVersionStore.GetSelectorStrategy
  id: GetSelectorStrategy
  parent: Orleans.Versions.IVersionStore
  langs:
  - csharp
  - vb
  name: GetSelectorStrategy()
  nameWithType: IVersionStore.GetSelectorStrategy()
  fullName: Orleans.Versions.IVersionStore.GetSelectorStrategy()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetSelectorStrategy
    path: src/Orleans.Core.Abstractions/Versions/IVersionStore.cs
    startLine: 13
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans.Versions
  syntax:
    content: Task<VersionSelectorStrategy> GetSelectorStrategy()
    return:
      type: Task{Orleans.Versions.Selector.VersionSelectorStrategy}
    content.vb: Function GetSelectorStrategy As Task(Of VersionSelectorStrategy)
  overload: Orleans.Versions.IVersionStore.GetSelectorStrategy*
references:
- uid: Orleans.Versions
  commentId: N:Orleans.Versions
  isExternal: false
  name: Orleans.Versions
  nameWithType: Orleans.Versions
  fullName: Orleans.Versions
- uid: Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
  commentId: M:Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
  parent: Orleans.IVersionManager
  isExternal: false
  name: SetCompatibilityStrategy(CompatibilityStrategy)
  nameWithType: IVersionManager.SetCompatibilityStrategy(CompatibilityStrategy)
  fullName: Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
  spec.csharp:
  - uid: Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
    name: SetCompatibilityStrategy
    nameWithType: IVersionManager.SetCompatibilityStrategy
    fullName: Orleans.IVersionManager.SetCompatibilityStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)
    name: SetCompatibilityStrategy
    nameWithType: IVersionManager.SetCompatibilityStrategy
    fullName: Orleans.IVersionManager.SetCompatibilityStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
  commentId: M:Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
  parent: Orleans.IVersionManager
  isExternal: false
  name: SetSelectorStrategy(VersionSelectorStrategy)
  nameWithType: IVersionManager.SetSelectorStrategy(VersionSelectorStrategy)
  fullName: Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
  spec.csharp:
  - uid: Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
    name: SetSelectorStrategy
    nameWithType: IVersionManager.SetSelectorStrategy
    fullName: Orleans.IVersionManager.SetSelectorStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)
    name: SetSelectorStrategy
    nameWithType: IVersionManager.SetSelectorStrategy
    fullName: Orleans.IVersionManager.SetSelectorStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)
  commentId: M:Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)
  parent: Orleans.IVersionManager
  isExternal: true
  name: SetCompatibilityStrategy(Int32, CompatibilityStrategy)
  nameWithType: IVersionManager.SetCompatibilityStrategy(Int32, CompatibilityStrategy)
  fullName: Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32, Orleans.Versions.Compatibility.CompatibilityStrategy)
  spec.csharp:
  - uid: Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)
    name: SetCompatibilityStrategy
    nameWithType: IVersionManager.SetCompatibilityStrategy
    fullName: Orleans.IVersionManager.SetCompatibilityStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)
    name: SetCompatibilityStrategy
    nameWithType: IVersionManager.SetCompatibilityStrategy
    fullName: Orleans.IVersionManager.SetCompatibilityStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)
  commentId: M:Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)
  parent: Orleans.IVersionManager
  isExternal: true
  name: SetSelectorStrategy(Int32, VersionSelectorStrategy)
  nameWithType: IVersionManager.SetSelectorStrategy(Int32, VersionSelectorStrategy)
  fullName: Orleans.IVersionManager.SetSelectorStrategy(System.Int32, Orleans.Versions.Selector.VersionSelectorStrategy)
  spec.csharp:
  - uid: Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)
    name: SetSelectorStrategy
    nameWithType: IVersionManager.SetSelectorStrategy
    fullName: Orleans.IVersionManager.SetSelectorStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)
    name: SetSelectorStrategy
    nameWithType: IVersionManager.SetSelectorStrategy
    fullName: Orleans.IVersionManager.SetSelectorStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Versions.IVersionStore.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IVersionStore>()
  nameWithType: ImmutableExt.AsImmutable<IVersionStore>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Versions.IVersionStore>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IVersionStore)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Versions.IVersionStore)()
  name.vb: AsImmutable(Of IVersionStore)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IVersionStore>
    nameWithType: ImmutableExt.AsImmutable<IVersionStore>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.Versions.IVersionStore>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IVersionStore)
    nameWithType: ImmutableExt.AsImmutable(Of IVersionStore)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.Versions.IVersionStore)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IVersionManager
  commentId: T:Orleans.IVersionManager
  parent: Orleans
  isExternal: false
  name: IVersionManager
  nameWithType: IVersionManager
  fullName: Orleans.IVersionManager
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans
  commentId: N:Orleans
  isExternal: false
  name: Orleans
  nameWithType: Orleans
  fullName: Orleans
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.Versions.IVersionStore.IsEnabled*
  commentId: Overload:Orleans.Versions.IVersionStore.IsEnabled
  isExternal: false
  name: IsEnabled
  nameWithType: IVersionStore.IsEnabled
  fullName: Orleans.Versions.IVersionStore.IsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Versions.IVersionStore.GetCompatibilityStrategies*
  commentId: Overload:Orleans.Versions.IVersionStore.GetCompatibilityStrategies
  isExternal: false
  name: GetCompatibilityStrategies
  nameWithType: IVersionStore.GetCompatibilityStrategies
  fullName: Orleans.Versions.IVersionStore.GetCompatibilityStrategies
- uid: Task{Dictionary{System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy}}
  commentId: '!:Task{Dictionary{System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy}}'
  definition: Task`1
  name: Task<Dictionary<Int32, CompatibilityStrategy>>
  nameWithType: Task<Dictionary<Int32, CompatibilityStrategy>>
  fullName: Task<Dictionary<System.Int32, Orleans.Versions.Compatibility.CompatibilityStrategy>>
  nameWithType.vb: Task(Of Dictionary(Of Int32, CompatibilityStrategy))
  fullName.vb: Task(Of Dictionary(Of System.Int32, Orleans.Versions.Compatibility.CompatibilityStrategy))
  name.vb: Task(Of Dictionary(Of Int32, CompatibilityStrategy))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Versions.IVersionStore.GetSelectorStrategies*
  commentId: Overload:Orleans.Versions.IVersionStore.GetSelectorStrategies
  isExternal: false
  name: GetSelectorStrategies
  nameWithType: IVersionStore.GetSelectorStrategies
  fullName: Orleans.Versions.IVersionStore.GetSelectorStrategies
- uid: Task{Dictionary{System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy}}
  commentId: '!:Task{Dictionary{System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy}}'
  definition: Task`1
  name: Task<Dictionary<Int32, VersionSelectorStrategy>>
  nameWithType: Task<Dictionary<Int32, VersionSelectorStrategy>>
  fullName: Task<Dictionary<System.Int32, Orleans.Versions.Selector.VersionSelectorStrategy>>
  nameWithType.vb: Task(Of Dictionary(Of Int32, VersionSelectorStrategy))
  fullName.vb: Task(Of Dictionary(Of System.Int32, Orleans.Versions.Selector.VersionSelectorStrategy))
  name.vb: Task(Of Dictionary(Of Int32, VersionSelectorStrategy))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Versions.IVersionStore.GetCompatibilityStrategy*
  commentId: Overload:Orleans.Versions.IVersionStore.GetCompatibilityStrategy
  isExternal: false
  name: GetCompatibilityStrategy
  nameWithType: IVersionStore.GetCompatibilityStrategy
  fullName: Orleans.Versions.IVersionStore.GetCompatibilityStrategy
- uid: Task{Orleans.Versions.Compatibility.CompatibilityStrategy}
  commentId: '!:Task{Orleans.Versions.Compatibility.CompatibilityStrategy}'
  definition: Task`1
  name: Task<CompatibilityStrategy>
  nameWithType: Task<CompatibilityStrategy>
  fullName: Task<Orleans.Versions.Compatibility.CompatibilityStrategy>
  nameWithType.vb: Task(Of CompatibilityStrategy)
  fullName.vb: Task(Of Orleans.Versions.Compatibility.CompatibilityStrategy)
  name.vb: Task(Of CompatibilityStrategy)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Versions.Compatibility.CompatibilityStrategy
    name: CompatibilityStrategy
    nameWithType: CompatibilityStrategy
    fullName: Orleans.Versions.Compatibility.CompatibilityStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Versions.IVersionStore.GetSelectorStrategy*
  commentId: Overload:Orleans.Versions.IVersionStore.GetSelectorStrategy
  isExternal: false
  name: GetSelectorStrategy
  nameWithType: IVersionStore.GetSelectorStrategy
  fullName: Orleans.Versions.IVersionStore.GetSelectorStrategy
- uid: Task{Orleans.Versions.Selector.VersionSelectorStrategy}
  commentId: '!:Task{Orleans.Versions.Selector.VersionSelectorStrategy}'
  definition: Task`1
  name: Task<VersionSelectorStrategy>
  nameWithType: Task<VersionSelectorStrategy>
  fullName: Task<Orleans.Versions.Selector.VersionSelectorStrategy>
  nameWithType.vb: Task(Of VersionSelectorStrategy)
  fullName.vb: Task(Of Orleans.Versions.Selector.VersionSelectorStrategy)
  name.vb: Task(Of VersionSelectorStrategy)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Versions.Selector.VersionSelectorStrategy
    name: VersionSelectorStrategy
    nameWithType: VersionSelectorStrategy
    fullName: Orleans.Versions.Selector.VersionSelectorStrategy
  - name: )
    nameWithType: )
    fullName: )
