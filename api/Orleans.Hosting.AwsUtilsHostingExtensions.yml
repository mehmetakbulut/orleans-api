### YamlMime:ManagedReference
items:
- uid: Orleans.Hosting.AwsUtilsHostingExtensions
  commentId: T:Orleans.Hosting.AwsUtilsHostingExtensions
  id: AwsUtilsHostingExtensions
  parent: Orleans.Hosting
  children:
  - Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}})
  - Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{Orleans.Configuration.DynamoDBGatewayOptions})
  - Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}})
  - Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{Orleans.Configuration.DynamoDBClusteringOptions})
  langs:
  - csharp
  - vb
  name: AwsUtilsHostingExtensions
  nameWithType: AwsUtilsHostingExtensions
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions
  type: Class
  source:
    remote:
      path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: AwsUtilsHostingExtensions
    path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
    startLine: 8
  assemblies:
  - Orleans.Clustering.DynamoDB
  namespace: Orleans.Hosting
  syntax:
    content: 'public static class AwsUtilsHostingExtensions : object'
    content.vb: >-
      Public Module AwsUtilsHostingExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{Orleans.Configuration.DynamoDBClusteringOptions})
  commentId: M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{Orleans.Configuration.DynamoDBClusteringOptions})
  id: UseDynamoDBClustering(ISiloHostBuilder,Action{Orleans.Configuration.DynamoDBClusteringOptions})
  isExtensionMethod: true
  parent: Orleans.Hosting.AwsUtilsHostingExtensions
  langs:
  - csharp
  - vb
  name: UseDynamoDBClustering(ISiloHostBuilder, Action<DynamoDBClusteringOptions>)
  nameWithType: AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action<DynamoDBClusteringOptions>)
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action<Orleans.Configuration.DynamoDBClusteringOptions>)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: UseDynamoDBClustering
    path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
    startLine: 22
  assemblies:
  - Orleans.Clustering.DynamoDB
  namespace: Orleans.Hosting
  summary: "\nConfigures the silo to use DynamoDB for clustering.\n"
  example: []
  syntax:
    content: public static ISiloHostBuilder UseDynamoDBClustering(this ISiloHostBuilder builder, Action<DynamoDBClusteringOptions> configureOptions)
    parameters:
    - id: builder
      type: ISiloHostBuilder
      description: "\nThe builder.\n"
    - id: configureOptions
      type: Action{Orleans.Configuration.DynamoDBClusteringOptions}
      description: "\nThe configuration delegate.\n"
    return:
      type: ISiloHostBuilder
      description: "\nThe provided <see cref=\"!:ISiloHostBuilder\"></see>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseDynamoDBClustering(builder As ISiloHostBuilder, configureOptions As Action(Of DynamoDBClusteringOptions)) As ISiloHostBuilder
  overload: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering*
  nameWithType.vb: AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action(Of DynamoDBClusteringOptions))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action(Of Orleans.Configuration.DynamoDBClusteringOptions))
  name.vb: UseDynamoDBClustering(ISiloHostBuilder, Action(Of DynamoDBClusteringOptions))
- uid: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}})
  commentId: M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}})
  id: UseDynamoDBClustering(ISiloHostBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}})
  isExtensionMethod: true
  parent: Orleans.Hosting.AwsUtilsHostingExtensions
  langs:
  - csharp
  - vb
  name: UseDynamoDBClustering(ISiloHostBuilder, Action<OptionsBuilder<DynamoDBClusteringOptions>>)
  nameWithType: AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action<OptionsBuilder<DynamoDBClusteringOptions>>)
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action<OptionsBuilder<Orleans.Configuration.DynamoDBClusteringOptions>>)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: UseDynamoDBClustering
    path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
    startLine: 50
  assemblies:
  - Orleans.Clustering.DynamoDB
  namespace: Orleans.Hosting
  summary: "\nConfigures the silo to use DynamoDB for clustering.\n"
  example: []
  syntax:
    content: public static ISiloHostBuilder UseDynamoDBClustering(this ISiloHostBuilder builder, Action<OptionsBuilder<DynamoDBClusteringOptions>> configureOptions)
    parameters:
    - id: builder
      type: ISiloHostBuilder
      description: "\nThe builder.\n"
    - id: configureOptions
      type: Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}}
      description: "\nThe configuration delegate.\n"
    return:
      type: ISiloHostBuilder
      description: "\nThe provided <see cref=\"!:ISiloHostBuilder\"></see>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseDynamoDBClustering(builder As ISiloHostBuilder, configureOptions As Action(Of OptionsBuilder(Of DynamoDBClusteringOptions))) As ISiloHostBuilder
  overload: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering*
  nameWithType.vb: AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action(Of OptionsBuilder(Of DynamoDBClusteringOptions)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(ISiloHostBuilder, Action(Of OptionsBuilder(Of Orleans.Configuration.DynamoDBClusteringOptions)))
  name.vb: UseDynamoDBClustering(ISiloHostBuilder, Action(Of OptionsBuilder(Of DynamoDBClusteringOptions)))
- uid: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{Orleans.Configuration.DynamoDBGatewayOptions})
  commentId: M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{Orleans.Configuration.DynamoDBGatewayOptions})
  id: UseDynamoDBClustering(IClientBuilder,Action{Orleans.Configuration.DynamoDBGatewayOptions})
  isExtensionMethod: true
  parent: Orleans.Hosting.AwsUtilsHostingExtensions
  langs:
  - csharp
  - vb
  name: UseDynamoDBClustering(IClientBuilder, Action<DynamoDBGatewayOptions>)
  nameWithType: AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action<DynamoDBGatewayOptions>)
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action<Orleans.Configuration.DynamoDBGatewayOptions>)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: UseDynamoDBClustering
    path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
    startLine: 74
  assemblies:
  - Orleans.Clustering.DynamoDB
  namespace: Orleans.Hosting
  summary: "\nConfigures the client to use DynamoDB for clustering.\n"
  example: []
  syntax:
    content: public static IClientBuilder UseDynamoDBClustering(this IClientBuilder builder, Action<DynamoDBGatewayOptions> configureOptions)
    parameters:
    - id: builder
      type: IClientBuilder
      description: "\nThe builder.\n"
    - id: configureOptions
      type: Action{Orleans.Configuration.DynamoDBGatewayOptions}
      description: "\nThe configuration delegate.\n"
    return:
      type: IClientBuilder
      description: "\nThe provided <see cref=\"!:IClientBuilder\"></see>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseDynamoDBClustering(builder As IClientBuilder, configureOptions As Action(Of DynamoDBGatewayOptions)) As IClientBuilder
  overload: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering*
  nameWithType.vb: AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action(Of DynamoDBGatewayOptions))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action(Of Orleans.Configuration.DynamoDBGatewayOptions))
  name.vb: UseDynamoDBClustering(IClientBuilder, Action(Of DynamoDBGatewayOptions))
- uid: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}})
  commentId: M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}})
  id: UseDynamoDBClustering(IClientBuilder,Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}})
  isExtensionMethod: true
  parent: Orleans.Hosting.AwsUtilsHostingExtensions
  langs:
  - csharp
  - vb
  name: UseDynamoDBClustering(IClientBuilder, Action<OptionsBuilder<DynamoDBGatewayOptions>>)
  nameWithType: AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action<OptionsBuilder<DynamoDBGatewayOptions>>)
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action<OptionsBuilder<Orleans.Configuration.DynamoDBGatewayOptions>>)
  type: Method
  source:
    remote:
      path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: UseDynamoDBClustering
    path: src/AWS/Orleans.Clustering.DynamoDB/AWSUtilsHostingExtensions.cs
    startLine: 102
  assemblies:
  - Orleans.Clustering.DynamoDB
  namespace: Orleans.Hosting
  summary: "\nConfigures the client to use DynamoDB for clustering.\n"
  example: []
  syntax:
    content: public static IClientBuilder UseDynamoDBClustering(this IClientBuilder builder, Action<OptionsBuilder<DynamoDBGatewayOptions>> configureOptions)
    parameters:
    - id: builder
      type: IClientBuilder
      description: "\nThe builder.\n"
    - id: configureOptions
      type: Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}}
      description: "\nThe configuration delegate.\n"
    return:
      type: IClientBuilder
      description: "\nThe provided <see cref=\"!:IClientBuilder\"></see>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseDynamoDBClustering(builder As IClientBuilder, configureOptions As Action(Of OptionsBuilder(Of DynamoDBGatewayOptions))) As IClientBuilder
  overload: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering*
  nameWithType.vb: AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action(Of OptionsBuilder(Of DynamoDBGatewayOptions)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(IClientBuilder, Action(Of OptionsBuilder(Of Orleans.Configuration.DynamoDBGatewayOptions)))
  name.vb: UseDynamoDBClustering(IClientBuilder, Action(Of OptionsBuilder(Of DynamoDBGatewayOptions)))
references:
- uid: Orleans.Hosting
  commentId: N:Orleans.Hosting
  isExternal: false
  name: Orleans.Hosting
  nameWithType: Orleans.Hosting
  fullName: Orleans.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering*
  commentId: Overload:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering
  isExternal: false
  name: UseDynamoDBClustering
  nameWithType: AwsUtilsHostingExtensions.UseDynamoDBClustering
  fullName: Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering
- uid: ISiloHostBuilder
  isExternal: true
  name: ISiloHostBuilder
  nameWithType: ISiloHostBuilder
  fullName: ISiloHostBuilder
- uid: Action{Orleans.Configuration.DynamoDBClusteringOptions}
  commentId: '!:Action{Orleans.Configuration.DynamoDBClusteringOptions}'
  definition: Action`1
  name: Action<DynamoDBClusteringOptions>
  nameWithType: Action<DynamoDBClusteringOptions>
  fullName: Action<Orleans.Configuration.DynamoDBClusteringOptions>
  nameWithType.vb: Action(Of DynamoDBClusteringOptions)
  fullName.vb: Action(Of Orleans.Configuration.DynamoDBClusteringOptions)
  name.vb: Action(Of DynamoDBClusteringOptions)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Configuration.DynamoDBClusteringOptions
    name: DynamoDBClusteringOptions
    nameWithType: DynamoDBClusteringOptions
    fullName: Orleans.Configuration.DynamoDBClusteringOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Configuration.DynamoDBClusteringOptions
    name: DynamoDBClusteringOptions
    nameWithType: DynamoDBClusteringOptions
    fullName: Orleans.Configuration.DynamoDBClusteringOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}}
  commentId: '!:Action{OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}}'
  definition: Action`1
  name: Action<OptionsBuilder<DynamoDBClusteringOptions>>
  nameWithType: Action<OptionsBuilder<DynamoDBClusteringOptions>>
  fullName: Action<OptionsBuilder<Orleans.Configuration.DynamoDBClusteringOptions>>
  nameWithType.vb: Action(Of OptionsBuilder(Of DynamoDBClusteringOptions))
  fullName.vb: Action(Of OptionsBuilder(Of Orleans.Configuration.DynamoDBClusteringOptions))
  name.vb: Action(Of OptionsBuilder(Of DynamoDBClusteringOptions))
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OptionsBuilder`1
    name: OptionsBuilder
    nameWithType: OptionsBuilder
    fullName: OptionsBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Configuration.DynamoDBClusteringOptions
    name: DynamoDBClusteringOptions
    nameWithType: DynamoDBClusteringOptions
    fullName: Orleans.Configuration.DynamoDBClusteringOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OptionsBuilder`1
    name: OptionsBuilder
    nameWithType: OptionsBuilder
    fullName: OptionsBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Configuration.DynamoDBClusteringOptions
    name: DynamoDBClusteringOptions
    nameWithType: DynamoDBClusteringOptions
    fullName: Orleans.Configuration.DynamoDBClusteringOptions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IClientBuilder
  isExternal: true
  name: IClientBuilder
  nameWithType: IClientBuilder
  fullName: IClientBuilder
- uid: Action{Orleans.Configuration.DynamoDBGatewayOptions}
  commentId: '!:Action{Orleans.Configuration.DynamoDBGatewayOptions}'
  definition: Action`1
  name: Action<DynamoDBGatewayOptions>
  nameWithType: Action<DynamoDBGatewayOptions>
  fullName: Action<Orleans.Configuration.DynamoDBGatewayOptions>
  nameWithType.vb: Action(Of DynamoDBGatewayOptions)
  fullName.vb: Action(Of Orleans.Configuration.DynamoDBGatewayOptions)
  name.vb: Action(Of DynamoDBGatewayOptions)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Configuration.DynamoDBGatewayOptions
    name: DynamoDBGatewayOptions
    nameWithType: DynamoDBGatewayOptions
    fullName: Orleans.Configuration.DynamoDBGatewayOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Configuration.DynamoDBGatewayOptions
    name: DynamoDBGatewayOptions
    nameWithType: DynamoDBGatewayOptions
    fullName: Orleans.Configuration.DynamoDBGatewayOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}}
  commentId: '!:Action{OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}}'
  definition: Action`1
  name: Action<OptionsBuilder<DynamoDBGatewayOptions>>
  nameWithType: Action<OptionsBuilder<DynamoDBGatewayOptions>>
  fullName: Action<OptionsBuilder<Orleans.Configuration.DynamoDBGatewayOptions>>
  nameWithType.vb: Action(Of OptionsBuilder(Of DynamoDBGatewayOptions))
  fullName.vb: Action(Of OptionsBuilder(Of Orleans.Configuration.DynamoDBGatewayOptions))
  name.vb: Action(Of OptionsBuilder(Of DynamoDBGatewayOptions))
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OptionsBuilder`1
    name: OptionsBuilder
    nameWithType: OptionsBuilder
    fullName: OptionsBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Configuration.DynamoDBGatewayOptions
    name: DynamoDBGatewayOptions
    nameWithType: DynamoDBGatewayOptions
    fullName: Orleans.Configuration.DynamoDBGatewayOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OptionsBuilder`1
    name: OptionsBuilder
    nameWithType: OptionsBuilder
    fullName: OptionsBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Configuration.DynamoDBGatewayOptions
    name: DynamoDBGatewayOptions
    nameWithType: DynamoDBGatewayOptions
    fullName: Orleans.Configuration.DynamoDBGatewayOptions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
