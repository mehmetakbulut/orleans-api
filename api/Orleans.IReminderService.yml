### YamlMime:ManagedReference
items:
- uid: Orleans.IReminderService
  commentId: T:Orleans.IReminderService
  id: IReminderService
  parent: Orleans
  children:
  - Orleans.IReminderService.GetReminder(Orleans.Runtime.GrainReference,System.String)
  - Orleans.IReminderService.GetReminders(Orleans.Runtime.GrainReference)
  - Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,TimeSpan,TimeSpan)
  - Orleans.IReminderService.Start
  - Orleans.IReminderService.Stop
  - Orleans.IReminderService.UnregisterReminder(Orleans.Runtime.IGrainReminder)
  langs:
  - csharp
  - vb
  name: IReminderService
  nameWithType: IReminderService
  fullName: Orleans.IReminderService
  type: Interface
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: IReminderService
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 8
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: 'public interface IReminderService : IGrainService, ISystemTarget, IAddressable'
    content.vb: >-
      Public Interface IReminderService

          Inherits IGrainService
  extensionMethods:
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.AsReference``1
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.Cast``1
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.BindGrainReference(Orleans.IGrainFactory)
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyLong(System.String@)
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyLong
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKey(System.String@)
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKey
  - Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyString
  - Orleans.IReminderService.Orleans.GrainExtensions.InvokeOneWay``1(Func{Orleans.IReminderService,Task})
  - Orleans.IReminderService.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Orleans.IReminderService.Start
  commentId: M:Orleans.IReminderService.Start
  id: Start
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: IReminderService.Start()
  fullName: Orleans.IReminderService.Start()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Start
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 10
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: Task Start()
    return:
      type: Task
    content.vb: Function Start As Task
  overload: Orleans.IReminderService.Start*
- uid: Orleans.IReminderService.Stop
  commentId: M:Orleans.IReminderService.Stop
  id: Stop
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: IReminderService.Stop()
  fullName: Orleans.IReminderService.Stop()
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: Stop
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 11
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: Task Stop()
    return:
      type: Task
    content.vb: Function Stop As Task
  overload: Orleans.IReminderService.Stop*
- uid: Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,TimeSpan,TimeSpan)
  commentId: M:Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,TimeSpan,TimeSpan)
  id: RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,TimeSpan,TimeSpan)
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: RegisterOrUpdateReminder(GrainReference, String, TimeSpan, TimeSpan)
  nameWithType: IReminderService.RegisterOrUpdateReminder(GrainReference, String, TimeSpan, TimeSpan)
  fullName: Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference, System.String, TimeSpan, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: RegisterOrUpdateReminder
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 21
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  summary: "\nRegisters a new reminder or updates an existing one\n"
  example: []
  syntax:
    content: Task<IGrainReminder> RegisterOrUpdateReminder(GrainReference grainRef, string reminderName, TimeSpan dueTime, TimeSpan period)
    parameters:
    - id: grainRef
      type: Orleans.Runtime.GrainReference
      description: ''
    - id: reminderName
      type: System.String
      description: ''
    - id: dueTime
      type: TimeSpan
      description: ''
    - id: period
      type: TimeSpan
      description: ''
    return:
      type: Task{Orleans.Runtime.IGrainReminder}
      description: ''
    content.vb: Function RegisterOrUpdateReminder(grainRef As GrainReference, reminderName As String, dueTime As TimeSpan, period As TimeSpan) As Task(Of IGrainReminder)
  overload: Orleans.IReminderService.RegisterOrUpdateReminder*
- uid: Orleans.IReminderService.UnregisterReminder(Orleans.Runtime.IGrainReminder)
  commentId: M:Orleans.IReminderService.UnregisterReminder(Orleans.Runtime.IGrainReminder)
  id: UnregisterReminder(Orleans.Runtime.IGrainReminder)
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: UnregisterReminder(IGrainReminder)
  nameWithType: IReminderService.UnregisterReminder(IGrainReminder)
  fullName: Orleans.IReminderService.UnregisterReminder(Orleans.Runtime.IGrainReminder)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: UnregisterReminder
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 23
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: Task UnregisterReminder(IGrainReminder reminder)
    parameters:
    - id: reminder
      type: Orleans.Runtime.IGrainReminder
    return:
      type: Task
    content.vb: Function UnregisterReminder(reminder As IGrainReminder) As Task
  overload: Orleans.IReminderService.UnregisterReminder*
- uid: Orleans.IReminderService.GetReminder(Orleans.Runtime.GrainReference,System.String)
  commentId: M:Orleans.IReminderService.GetReminder(Orleans.Runtime.GrainReference,System.String)
  id: GetReminder(Orleans.Runtime.GrainReference,System.String)
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: GetReminder(GrainReference, String)
  nameWithType: IReminderService.GetReminder(GrainReference, String)
  fullName: Orleans.IReminderService.GetReminder(Orleans.Runtime.GrainReference, System.String)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetReminder
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 25
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: Task<IGrainReminder> GetReminder(GrainReference grainRef, string reminderName)
    parameters:
    - id: grainRef
      type: Orleans.Runtime.GrainReference
    - id: reminderName
      type: System.String
    return:
      type: Task{Orleans.Runtime.IGrainReminder}
    content.vb: Function GetReminder(grainRef As GrainReference, reminderName As String) As Task(Of IGrainReminder)
  overload: Orleans.IReminderService.GetReminder*
- uid: Orleans.IReminderService.GetReminders(Orleans.Runtime.GrainReference)
  commentId: M:Orleans.IReminderService.GetReminders(Orleans.Runtime.GrainReference)
  id: GetReminders(Orleans.Runtime.GrainReference)
  parent: Orleans.IReminderService
  langs:
  - csharp
  - vb
  name: GetReminders(GrainReference)
  nameWithType: IReminderService.GetReminders(GrainReference)
  fullName: Orleans.IReminderService.GetReminders(Orleans.Runtime.GrainReference)
  type: Method
  source:
    remote:
      path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
      branch: api-reference
      repo: https://github.com/mehmetakbulut/orleans.git
    id: GetReminders
    path: src/Orleans.Core.Abstractions/SystemTargetInterfaces/IReminderService.cs
    startLine: 27
  assemblies:
  - Orleans.Core.Abstractions
  namespace: Orleans
  syntax:
    content: Task<List<IGrainReminder>> GetReminders(GrainReference grainRef)
    parameters:
    - id: grainRef
      type: Orleans.Runtime.GrainReference
    return:
      type: Task{List{Orleans.Runtime.IGrainReminder}}
    content.vb: Function GetReminders(grainRef As GrainReference) As Task(Of List(Of IGrainReminder))
  overload: Orleans.IReminderService.GetReminders*
references:
- uid: Orleans
  commentId: N:Orleans
  isExternal: false
  name: Orleans
  nameWithType: Orleans
  fullName: Orleans
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.AsReference``1
  commentId: M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
  name: AsReference<TGrainInterface>()
  nameWithType: GrainExtensions.AsReference<TGrainInterface>()
  fullName: Orleans.GrainExtensions.AsReference<TGrainInterface>()
  nameWithType.vb: GrainExtensions.AsReference(Of TGrainInterface)()
  fullName.vb: Orleans.GrainExtensions.AsReference(Of TGrainInterface)()
  name.vb: AsReference(Of TGrainInterface)()
  spec.csharp:
  - uid: Orleans.GrainExtensions.AsReference``1
    name: AsReference<TGrainInterface>
    nameWithType: GrainExtensions.AsReference<TGrainInterface>
    fullName: Orleans.GrainExtensions.AsReference<TGrainInterface>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.AsReference``1
    name: AsReference(Of TGrainInterface)
    nameWithType: GrainExtensions.AsReference(Of TGrainInterface)
    fullName: Orleans.GrainExtensions.AsReference(Of TGrainInterface)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.Cast``1
  commentId: M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
  name: Cast<TGrainInterface>()
  nameWithType: GrainExtensions.Cast<TGrainInterface>()
  fullName: Orleans.GrainExtensions.Cast<TGrainInterface>()
  nameWithType.vb: GrainExtensions.Cast(Of TGrainInterface)()
  fullName.vb: Orleans.GrainExtensions.Cast(Of TGrainInterface)()
  name.vb: Cast(Of TGrainInterface)()
  spec.csharp:
  - uid: Orleans.GrainExtensions.Cast``1
    name: Cast<TGrainInterface>
    nameWithType: GrainExtensions.Cast<TGrainInterface>
    fullName: Orleans.GrainExtensions.Cast<TGrainInterface>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.Cast``1
    name: Cast(Of TGrainInterface)
    nameWithType: GrainExtensions.Cast(Of TGrainInterface)
    fullName: Orleans.GrainExtensions.Cast(Of TGrainInterface)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.BindGrainReference(Orleans.IGrainFactory)
  commentId: M:Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
  name: BindGrainReference(IGrainFactory)
  nameWithType: GrainExtensions.BindGrainReference(IGrainFactory)
  fullName: Orleans.GrainExtensions.BindGrainReference(Orleans.IGrainFactory)
  spec.csharp:
  - uid: Orleans.GrainExtensions.BindGrainReference(Orleans.IGrainFactory)
    name: BindGrainReference
    nameWithType: GrainExtensions.BindGrainReference
    fullName: Orleans.GrainExtensions.BindGrainReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.IGrainFactory
    name: IGrainFactory
    nameWithType: IGrainFactory
    fullName: Orleans.IGrainFactory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.BindGrainReference(Orleans.IGrainFactory)
    name: BindGrainReference
    nameWithType: GrainExtensions.BindGrainReference
    fullName: Orleans.GrainExtensions.BindGrainReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.IGrainFactory
    name: IGrainFactory
    nameWithType: IGrainFactory
    fullName: Orleans.IGrainFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  commentId: M:Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
  name: IsPrimaryKeyBasedOnLong()
  nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong()
  fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong()
  spec.csharp:
  - uid: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
    name: IsPrimaryKeyBasedOnLong
    nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong
    fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
    name: IsPrimaryKeyBasedOnLong
    nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong
    fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyLong(System.String@)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
  name: GetPrimaryKeyLong(String)
  nameWithType: GrainExtensions.GetPrimaryKeyLong(String)
  fullName: Orleans.GrainExtensions.GetPrimaryKeyLong(System.String)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(System.String@)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(System.String@)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyLong
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
  name: GetPrimaryKeyLong()
  nameWithType: GrainExtensions.GetPrimaryKeyLong()
  fullName: Orleans.GrainExtensions.GetPrimaryKeyLong()
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKey(System.String@)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
  name: GetPrimaryKey(String)
  nameWithType: GrainExtensions.GetPrimaryKey(String)
  fullName: Orleans.GrainExtensions.GetPrimaryKey(System.String)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(System.String@)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(System.String@)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKey
  commentId: M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
  name: GetPrimaryKey()
  nameWithType: GrainExtensions.GetPrimaryKey()
  fullName: Orleans.GrainExtensions.GetPrimaryKey()
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKey
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKey
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime.IAddressable.Orleans.GrainExtensions.GetPrimaryKeyString
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
  name: GetPrimaryKeyString()
  nameWithType: GrainExtensions.GetPrimaryKeyString()
  fullName: Orleans.GrainExtensions.GetPrimaryKeyString()
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyString
    name: GetPrimaryKeyString
    nameWithType: GrainExtensions.GetPrimaryKeyString
    fullName: Orleans.GrainExtensions.GetPrimaryKeyString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyString
    name: GetPrimaryKeyString
    nameWithType: GrainExtensions.GetPrimaryKeyString
    fullName: Orleans.GrainExtensions.GetPrimaryKeyString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IReminderService.Orleans.GrainExtensions.InvokeOneWay``1(Func{Orleans.IReminderService,Task})
  commentId: M:Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
  parent: Orleans.GrainExtensions
  definition: Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
  name: InvokeOneWay<IReminderService>(Func<IReminderService, Task>)
  nameWithType: GrainExtensions.InvokeOneWay<IReminderService>(Func<IReminderService, Task>)
  fullName: Orleans.GrainExtensions.InvokeOneWay<Orleans.IReminderService>(Func<Orleans.IReminderService, Task>)
  nameWithType.vb: GrainExtensions.InvokeOneWay(Of IReminderService)(Func(Of IReminderService, Task))
  fullName.vb: Orleans.GrainExtensions.InvokeOneWay(Of Orleans.IReminderService)(Func(Of Orleans.IReminderService, Task))
  name.vb: InvokeOneWay(Of IReminderService)(Func(Of IReminderService, Task))
  spec.csharp:
  - uid: Orleans.GrainExtensions.InvokeOneWay``1(Func{``0,Task})
    name: InvokeOneWay<IReminderService>
    nameWithType: GrainExtensions.InvokeOneWay<IReminderService>
    fullName: Orleans.GrainExtensions.InvokeOneWay<Orleans.IReminderService>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.IReminderService
    name: IReminderService
    nameWithType: IReminderService
    fullName: Orleans.IReminderService
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.InvokeOneWay``1(Func{``0,Task})
    name: InvokeOneWay(Of IReminderService)
    nameWithType: GrainExtensions.InvokeOneWay(Of IReminderService)
    fullName: Orleans.GrainExtensions.InvokeOneWay(Of Orleans.IReminderService)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.IReminderService
    name: IReminderService
    nameWithType: IReminderService
    fullName: Orleans.IReminderService
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IReminderService.Orleans.Concurrency.ImmutableExt.AsImmutable``1
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  parent: Orleans.Concurrency.ImmutableExt
  definition: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  name: AsImmutable<IReminderService>()
  nameWithType: ImmutableExt.AsImmutable<IReminderService>()
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.IReminderService>()
  nameWithType.vb: ImmutableExt.AsImmutable(Of IReminderService)()
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.IReminderService)()
  name.vb: AsImmutable(Of IReminderService)()
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable<IReminderService>
    nameWithType: ImmutableExt.AsImmutable<IReminderService>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<Orleans.IReminderService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1
    name: AsImmutable(Of IReminderService)
    nameWithType: ImmutableExt.AsImmutable(Of IReminderService)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of Orleans.IReminderService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
  isExternal: false
  name: AsReference<TGrainInterface>(IAddressable)
  nameWithType: GrainExtensions.AsReference<TGrainInterface>(IAddressable)
  fullName: Orleans.GrainExtensions.AsReference<TGrainInterface>(Orleans.Runtime.IAddressable)
  nameWithType.vb: GrainExtensions.AsReference(Of TGrainInterface)(IAddressable)
  fullName.vb: Orleans.GrainExtensions.AsReference(Of TGrainInterface)(Orleans.Runtime.IAddressable)
  name.vb: AsReference(Of TGrainInterface)(IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
    name: AsReference<TGrainInterface>
    nameWithType: GrainExtensions.AsReference<TGrainInterface>
    fullName: Orleans.GrainExtensions.AsReference<TGrainInterface>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)
    name: AsReference(Of TGrainInterface)
    nameWithType: GrainExtensions.AsReference(Of TGrainInterface)
    fullName: Orleans.GrainExtensions.AsReference(Of TGrainInterface)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions
  commentId: T:Orleans.GrainExtensions
  parent: Orleans
  isExternal: false
  name: GrainExtensions
  nameWithType: GrainExtensions
  fullName: Orleans.GrainExtensions
- uid: Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
  isExternal: false
  name: Cast<TGrainInterface>(IAddressable)
  nameWithType: GrainExtensions.Cast<TGrainInterface>(IAddressable)
  fullName: Orleans.GrainExtensions.Cast<TGrainInterface>(Orleans.Runtime.IAddressable)
  nameWithType.vb: GrainExtensions.Cast(Of TGrainInterface)(IAddressable)
  fullName.vb: Orleans.GrainExtensions.Cast(Of TGrainInterface)(Orleans.Runtime.IAddressable)
  name.vb: Cast(Of TGrainInterface)(IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
    name: Cast<TGrainInterface>
    nameWithType: GrainExtensions.Cast<TGrainInterface>
    fullName: Orleans.GrainExtensions.Cast<TGrainInterface>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)
    name: Cast(Of TGrainInterface)
    nameWithType: GrainExtensions.Cast(Of TGrainInterface)
    fullName: Orleans.GrainExtensions.Cast(Of TGrainInterface)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
  commentId: M:Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
  isExternal: false
  name: BindGrainReference(IAddressable, IGrainFactory)
  nameWithType: GrainExtensions.BindGrainReference(IAddressable, IGrainFactory)
  fullName: Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable, Orleans.IGrainFactory)
  spec.csharp:
  - uid: Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
    name: BindGrainReference
    nameWithType: GrainExtensions.BindGrainReference
    fullName: Orleans.GrainExtensions.BindGrainReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.IGrainFactory
    name: IGrainFactory
    nameWithType: IGrainFactory
    fullName: Orleans.IGrainFactory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)
    name: BindGrainReference
    nameWithType: GrainExtensions.BindGrainReference
    fullName: Orleans.GrainExtensions.BindGrainReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Orleans.IGrainFactory
    name: IGrainFactory
    nameWithType: IGrainFactory
    fullName: Orleans.IGrainFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
  isExternal: false
  name: IsPrimaryKeyBasedOnLong(IAddressable)
  nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong(IAddressable)
  fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
    name: IsPrimaryKeyBasedOnLong
    nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong
    fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)
    name: IsPrimaryKeyBasedOnLong
    nameWithType: GrainExtensions.IsPrimaryKeyBasedOnLong
    fullName: Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
  isExternal: true
  name: GetPrimaryKeyLong(IAddressable, String)
  nameWithType: GrainExtensions.GetPrimaryKeyLong(IAddressable, String)
  fullName: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable, System.String)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
  isExternal: false
  name: GetPrimaryKeyLong(IAddressable)
  nameWithType: GrainExtensions.GetPrimaryKeyLong(IAddressable)
  fullName: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)
    name: GetPrimaryKeyLong
    nameWithType: GrainExtensions.GetPrimaryKeyLong
    fullName: Orleans.GrainExtensions.GetPrimaryKeyLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
  isExternal: true
  name: GetPrimaryKey(IAddressable, String)
  nameWithType: GrainExtensions.GetPrimaryKey(IAddressable, String)
  fullName: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable, System.String)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
  isExternal: false
  name: GetPrimaryKey(IAddressable)
  nameWithType: GrainExtensions.GetPrimaryKey(IAddressable)
  fullName: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)
    name: GetPrimaryKey
    nameWithType: GrainExtensions.GetPrimaryKey
    fullName: Orleans.GrainExtensions.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
  commentId: M:Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
  isExternal: false
  name: GetPrimaryKeyString(IAddressable)
  nameWithType: GrainExtensions.GetPrimaryKeyString(IAddressable)
  fullName: Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
  spec.csharp:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
    name: GetPrimaryKeyString
    nameWithType: GrainExtensions.GetPrimaryKeyString
    fullName: Orleans.GrainExtensions.GetPrimaryKeyString
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)
    name: GetPrimaryKeyString
    nameWithType: GrainExtensions.GetPrimaryKeyString
    fullName: Orleans.GrainExtensions.GetPrimaryKeyString
  - name: (
    nameWithType: (
    fullName: (
  - uid: Orleans.Runtime.IAddressable
    name: IAddressable
    nameWithType: IAddressable
    fullName: Orleans.Runtime.IAddressable
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
  commentId: M:Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
  isExternal: true
  name: InvokeOneWay<T>(T, Func<T, Task>)
  nameWithType: GrainExtensions.InvokeOneWay<T>(T, Func<T, Task>)
  fullName: Orleans.GrainExtensions.InvokeOneWay<T>(T, Func<T, Task>)
  nameWithType.vb: GrainExtensions.InvokeOneWay(Of T)(T, Func(Of T, Task))
  fullName.vb: Orleans.GrainExtensions.InvokeOneWay(Of T)(T, Func(Of T, Task))
  name.vb: InvokeOneWay(Of T)(T, Func(Of T, Task))
  spec.csharp:
  - uid: Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
    name: InvokeOneWay<T>
    nameWithType: GrainExtensions.InvokeOneWay<T>
    fullName: Orleans.GrainExtensions.InvokeOneWay<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.GrainExtensions.InvokeOneWay``1(``0,Func{``0,Task})
    name: InvokeOneWay(Of T)
    nameWithType: GrainExtensions.InvokeOneWay(Of T)
    fullName: Orleans.GrainExtensions.InvokeOneWay(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  commentId: M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
  isExternal: false
  name: AsImmutable<T>(T)
  nameWithType: ImmutableExt.AsImmutable<T>(T)
  fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>(T)
  nameWithType.vb: ImmutableExt.AsImmutable(Of T)(T)
  fullName.vb: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)(T)
  name.vb: AsImmutable(Of T)(T)
  spec.csharp:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable<T>
    nameWithType: ImmutableExt.AsImmutable<T>
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)
    name: AsImmutable(Of T)
    nameWithType: ImmutableExt.AsImmutable(Of T)
    fullName: Orleans.Concurrency.ImmutableExt.AsImmutable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Concurrency.ImmutableExt
  commentId: T:Orleans.Concurrency.ImmutableExt
  parent: Orleans.Concurrency
  isExternal: false
  name: ImmutableExt
  nameWithType: ImmutableExt
  fullName: Orleans.Concurrency.ImmutableExt
- uid: Orleans.Concurrency
  commentId: N:Orleans.Concurrency
  isExternal: false
  name: Orleans.Concurrency
  nameWithType: Orleans.Concurrency
  fullName: Orleans.Concurrency
- uid: Orleans.IReminderService.Start*
  commentId: Overload:Orleans.IReminderService.Start
  isExternal: false
  name: Start
  nameWithType: IReminderService.Start
  fullName: Orleans.IReminderService.Start
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Orleans.IReminderService.Stop*
  commentId: Overload:Orleans.IReminderService.Stop
  isExternal: false
  name: Stop
  nameWithType: IReminderService.Stop
  fullName: Orleans.IReminderService.Stop
- uid: Orleans.IReminderService.RegisterOrUpdateReminder*
  commentId: Overload:Orleans.IReminderService.RegisterOrUpdateReminder
  isExternal: false
  name: RegisterOrUpdateReminder
  nameWithType: IReminderService.RegisterOrUpdateReminder
  fullName: Orleans.IReminderService.RegisterOrUpdateReminder
- uid: Orleans.Runtime.GrainReference
  commentId: T:Orleans.Runtime.GrainReference
  parent: Orleans.Runtime
  isExternal: false
  name: GrainReference
  nameWithType: GrainReference
  fullName: Orleans.Runtime.GrainReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Task{Orleans.Runtime.IGrainReminder}
  commentId: '!:Task{Orleans.Runtime.IGrainReminder}'
  definition: Task`1
  name: Task<IGrainReminder>
  nameWithType: Task<IGrainReminder>
  fullName: Task<Orleans.Runtime.IGrainReminder>
  nameWithType.vb: Task(Of IGrainReminder)
  fullName.vb: Task(Of Orleans.Runtime.IGrainReminder)
  name.vb: Task(Of IGrainReminder)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Runtime.IGrainReminder
    name: IGrainReminder
    nameWithType: IGrainReminder
    fullName: Orleans.Runtime.IGrainReminder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Runtime.IGrainReminder
    name: IGrainReminder
    nameWithType: IGrainReminder
    fullName: Orleans.Runtime.IGrainReminder
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.Runtime
  commentId: N:Orleans.Runtime
  isExternal: false
  name: Orleans.Runtime
  nameWithType: Orleans.Runtime
  fullName: Orleans.Runtime
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Orleans.IReminderService.UnregisterReminder*
  commentId: Overload:Orleans.IReminderService.UnregisterReminder
  isExternal: false
  name: UnregisterReminder
  nameWithType: IReminderService.UnregisterReminder
  fullName: Orleans.IReminderService.UnregisterReminder
- uid: Orleans.Runtime.IGrainReminder
  commentId: T:Orleans.Runtime.IGrainReminder
  parent: Orleans.Runtime
  isExternal: false
  name: IGrainReminder
  nameWithType: IGrainReminder
  fullName: Orleans.Runtime.IGrainReminder
- uid: Orleans.IReminderService.GetReminder*
  commentId: Overload:Orleans.IReminderService.GetReminder
  isExternal: false
  name: GetReminder
  nameWithType: IReminderService.GetReminder
  fullName: Orleans.IReminderService.GetReminder
- uid: Orleans.IReminderService.GetReminders*
  commentId: Overload:Orleans.IReminderService.GetReminders
  isExternal: false
  name: GetReminders
  nameWithType: IReminderService.GetReminders
  fullName: Orleans.IReminderService.GetReminders
- uid: Task{List{Orleans.Runtime.IGrainReminder}}
  commentId: '!:Task{List{Orleans.Runtime.IGrainReminder}}'
  definition: Task`1
  name: Task<List<IGrainReminder>>
  nameWithType: Task<List<IGrainReminder>>
  fullName: Task<List<Orleans.Runtime.IGrainReminder>>
  nameWithType.vb: Task(Of List(Of IGrainReminder))
  fullName.vb: Task(Of List(Of Orleans.Runtime.IGrainReminder))
  name.vb: Task(Of List(Of IGrainReminder))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Orleans.Runtime.IGrainReminder
    name: IGrainReminder
    nameWithType: IGrainReminder
    fullName: Orleans.Runtime.IGrainReminder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Orleans.Runtime.IGrainReminder
    name: IGrainReminder
    nameWithType: IGrainReminder
    fullName: Orleans.Runtime.IGrainReminder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
